// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type ArtistCredit = {
	"name": string
};

export const ArtistCredit = {
	as(subject: any, path: string = ""): ArtistCredit {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject["name"], path + "[\"name\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is ArtistCredit {
		try {
			ArtistCredit.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Track = {
	"title": string,
	"artist-credit": ArtistCredit[]
};

export const Track = {
	as(subject: any, path: string = ""): Track {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(ArtistCredit.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["artist-credit"], path + "[\"artist-credit\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Track {
		try {
			Track.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Disc = {
	"sectors": number,
	"offset-count": number,
	"id": string,
	"offsets": number[]
};

export const Disc = {
	as(subject: any, path: string = ""): Disc {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["sectors"], path + "[\"sectors\"]");
				(autoguard.guards.Number.as)(subject["offset-count"], path + "[\"offset-count\"]");
				(autoguard.guards.String.as)(subject["id"], path + "[\"id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.Number.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["offsets"], path + "[\"offsets\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Disc {
		try {
			Disc.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Media = {
	"position": number,
	"discs": Disc[],
	"tracks": Track[]
};

export const Media = {
	as(subject: any, path: string = ""): Media {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["position"], path + "[\"position\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Disc.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["discs"], path + "[\"discs\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Track.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["tracks"], path + "[\"tracks\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Media {
		try {
			Media.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Release = {
	"id": string,
	"date": string,
	"title": string,
	"artist-credit": ArtistCredit[],
	"media": Media[]
};

export const Release = {
	as(subject: any, path: string = ""): Release {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["date"], path + "[\"date\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(ArtistCredit.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["artist-credit"], path + "[\"artist-credit\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Media.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["media"], path + "[\"media\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Release {
		try {
			Release.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type DiscIdLookupResponse = {
	"releases": Release[]
};

export const DiscIdLookupResponse = {
	as(subject: any, path: string = ""): DiscIdLookupResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Release.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["releases"], path + "[\"releases\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is DiscIdLookupResponse {
		try {
			DiscIdLookupResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"ArtistCredit": ArtistCredit,
	"Track": Track,
	"Disc": Disc,
	"Media": Media,
	"Release": Release,
	"DiscIdLookupResponse": DiscIdLookupResponse
};

export const Autoguard = {
	"ArtistCredit": ArtistCredit,
	"Track": Track,
	"Disc": Disc,
	"Media": Media,
	"Release": Release,
	"DiscIdLookupResponse": DiscIdLookupResponse
};
