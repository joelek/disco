// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const FieldOrder: autoguard.serialization.MessageGuard<FieldOrder> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("bff"),
	autoguard.guards.StringLiteral.of("tff"),
	autoguard.guards.StringLiteral.of("progressive")
));

export type FieldOrder = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"bff">,
	autoguard.guards.StringLiteral<"tff">,
	autoguard.guards.StringLiteral<"progressive">
]>>;

export const CropSettings: autoguard.serialization.MessageGuard<CropSettings> = autoguard.guards.Object.of({
	"w": autoguard.guards.Number,
	"h": autoguard.guards.Number,
	"x": autoguard.guards.Number,
	"y": autoguard.guards.Number
}, {});

export type CropSettings = autoguard.guards.Object<{
	"w": autoguard.guards.Number,
	"h": autoguard.guards.Number,
	"x": autoguard.guards.Number,
	"y": autoguard.guards.Number
}, {}>;

export const Setting: autoguard.serialization.MessageGuard<Setting> = autoguard.guards.Object.of({
	"field_order": autoguard.guards.Reference.of(() => FieldOrder),
	"crop": autoguard.guards.Reference.of(() => CropSettings),
	"compressibility": autoguard.guards.Number
}, {});

export type Setting = autoguard.guards.Object<{
	"field_order": autoguard.guards.Reference<FieldOrder>,
	"crop": autoguard.guards.Reference<CropSettings>,
	"compressibility": autoguard.guards.Number
}, {}>;

export const Database: autoguard.serialization.MessageGuard<Database> = autoguard.guards.Record.of(autoguard.guards.Reference.of(() => Setting));

export type Database = autoguard.guards.Record<autoguard.guards.Reference<Setting>>;

export namespace Autoguard {
	export const Guards = {
		"FieldOrder": autoguard.guards.Reference.of(() => FieldOrder),
		"CropSettings": autoguard.guards.Reference.of(() => CropSettings),
		"Setting": autoguard.guards.Reference.of(() => Setting),
		"Database": autoguard.guards.Reference.of(() => Database)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
