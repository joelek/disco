// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type ArtistType = ("ARTIST" | "CONTRIBUTOR" | string);

export const ArtistType = autoguard.Union.of(
	autoguard.StringLiteral.of("ARTIST"),
	autoguard.StringLiteral.of("CONTRIBUTOR"),
	autoguard.String
);

export type SearchResponseArtist = {
	"id": number,
	"name": string,
	"artistTypes": ArtistType[],
	"url": string,
	"picture": string,
	"popularity": number
};

export const SearchResponseArtist = autoguard.Object.of({
	"id": autoguard.Number,
	"name": autoguard.String,
	"artistTypes": autoguard.Array.of(ArtistType),
	"url": autoguard.String,
	"picture": autoguard.String,
	"popularity": autoguard.Number
});

export type AlbumType = ("ALBUM" | string);

export const AlbumType = autoguard.Union.of(
	autoguard.StringLiteral.of("ALBUM"),
	autoguard.String
);

export type AudioQualityType = ("LOSSLESS" | "HI_RES" | string);

export const AudioQualityType = autoguard.Union.of(
	autoguard.StringLiteral.of("LOSSLESS"),
	autoguard.StringLiteral.of("HI_RES"),
	autoguard.String
);

export type AudioModeType = ("STEREO" | string);

export const AudioModeType = autoguard.Union.of(
	autoguard.StringLiteral.of("STEREO"),
	autoguard.String
);

export type ArtistRelationType = ("MAIN" | "FEATURED" | string);

export const ArtistRelationType = autoguard.Union.of(
	autoguard.StringLiteral.of("MAIN"),
	autoguard.StringLiteral.of("FEATURED"),
	autoguard.String
);

export type SearchResponseArtistRelation = {
	"id": number,
	"name": string,
	"type": ArtistRelationType
};

export const SearchResponseArtistRelation = autoguard.Object.of({
	"id": autoguard.Number,
	"name": autoguard.String,
	"type": ArtistRelationType
});

export type AlbumRelation = {
	"id": number,
	"title": string,
	"cover": string,
	"videoCover": (null | any),
	"releaseDate": string
};

export const AlbumRelation = autoguard.Object.of({
	"id": autoguard.Number,
	"title": autoguard.String,
	"cover": autoguard.String,
	"videoCover": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	),
	"releaseDate": autoguard.String
});

export type SearchResponseAlbum = {
	"id": number,
	"title": string,
	"duration": number,
	"streamReady": boolean,
	"streamStartDate": string,
	"allowStreaming": boolean,
	"premiumStreamingOnly": boolean,
	"numberOfTracks": number,
	"numberOfVideos": number,
	"numberOfVolumes": number,
	"releaseDate": string,
	"copyright": string,
	"type": AlbumType,
	"version": (any | null),
	"url": string,
	"cover": string,
	"videoCover": (any | null),
	"explicit": boolean,
	"upc": string,
	"popularity": number,
	"audioQuality": AudioQualityType,
	"audioModes": AudioModeType[],
	"artists": SearchResponseArtistRelation[]
};

export const SearchResponseAlbum = autoguard.Object.of({
	"id": autoguard.Number,
	"title": autoguard.String,
	"duration": autoguard.Number,
	"streamReady": autoguard.Boolean,
	"streamStartDate": autoguard.String,
	"allowStreaming": autoguard.Boolean,
	"premiumStreamingOnly": autoguard.Boolean,
	"numberOfTracks": autoguard.Number,
	"numberOfVideos": autoguard.Number,
	"numberOfVolumes": autoguard.Number,
	"releaseDate": autoguard.String,
	"copyright": autoguard.String,
	"type": AlbumType,
	"version": autoguard.Union.of(
		autoguard.Any,
		autoguard.Null
	),
	"url": autoguard.String,
	"cover": autoguard.String,
	"videoCover": autoguard.Union.of(
		autoguard.Any,
		autoguard.Null
	),
	"explicit": autoguard.Boolean,
	"upc": autoguard.String,
	"popularity": autoguard.Number,
	"audioQuality": AudioQualityType,
	"audioModes": autoguard.Array.of(AudioModeType),
	"artists": autoguard.Array.of(SearchResponseArtistRelation)
});

export type PlaylistType = ("ARTIST" | "EDITORIAL" | string);

export const PlaylistType = autoguard.Union.of(
	autoguard.StringLiteral.of("ARTIST"),
	autoguard.StringLiteral.of("EDITORIAL"),
	autoguard.String
);

export type PlaylistCreator = {
	"id": number,
	"name": string,
	"artistTypes": (null | any),
	"url": (null | any),
	"picture": (null | any),
	"popularity": number
};

export const PlaylistCreator = autoguard.Object.of({
	"id": autoguard.Number,
	"name": autoguard.String,
	"artistTypes": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	),
	"url": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	),
	"picture": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	),
	"popularity": autoguard.Number
});

export type SearchResponsePlaylist = {
	"uuid": string,
	"title": string,
	"numberOfTracks": number,
	"numberOfVideos": number,
	"creator": ({} | PlaylistCreator),
	"description": string,
	"duration": number,
	"lastUpdated": string,
	"created": string,
	"type": PlaylistType,
	"publicPlaylist": boolean,
	"url": string,
	"image": string,
	"popularity": number,
	"squareImage": string,
	"promotedArtists": SearchResponseArtistRelation[],
	"lastItemAddedAt": (null | any)
};

export const SearchResponsePlaylist = autoguard.Object.of({
	"uuid": autoguard.String,
	"title": autoguard.String,
	"numberOfTracks": autoguard.Number,
	"numberOfVideos": autoguard.Number,
	"creator": autoguard.Union.of(
		autoguard.Object.of({
		
		}),
		PlaylistCreator
	),
	"description": autoguard.String,
	"duration": autoguard.Number,
	"lastUpdated": autoguard.String,
	"created": autoguard.String,
	"type": PlaylistType,
	"publicPlaylist": autoguard.Boolean,
	"url": autoguard.String,
	"image": autoguard.String,
	"popularity": autoguard.Number,
	"squareImage": autoguard.String,
	"promotedArtists": autoguard.Array.of(SearchResponseArtistRelation),
	"lastItemAddedAt": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	)
});

export type SearchResponseTrack = {
	"id": number,
	"title": string,
	"duration": number,
	"replayGain": number,
	"peak": number,
	"allowStreaming": boolean,
	"streamReady": boolean,
	"streamStartDate": string,
	"premiumStreamingOnly": boolean,
	"trackNumber": number,
	"volumeNumber": number,
	"version": (null | any),
	"popularity": number,
	"copyright": string,
	"url": string,
	"isrc": string,
	"editable": boolean,
	"explicit": boolean,
	"audioQuality": AudioQualityType,
	"audioModes": AudioModeType[],
	"artists": SearchResponseArtistRelation[],
	"album": AlbumRelation
};

export const SearchResponseTrack = autoguard.Object.of({
	"id": autoguard.Number,
	"title": autoguard.String,
	"duration": autoguard.Number,
	"replayGain": autoguard.Number,
	"peak": autoguard.Number,
	"allowStreaming": autoguard.Boolean,
	"streamReady": autoguard.Boolean,
	"streamStartDate": autoguard.String,
	"premiumStreamingOnly": autoguard.Boolean,
	"trackNumber": autoguard.Number,
	"volumeNumber": autoguard.Number,
	"version": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	),
	"popularity": autoguard.Number,
	"copyright": autoguard.String,
	"url": autoguard.String,
	"isrc": autoguard.String,
	"editable": autoguard.Boolean,
	"explicit": autoguard.Boolean,
	"audioQuality": AudioQualityType,
	"audioModes": autoguard.Array.of(AudioModeType),
	"artists": autoguard.Array.of(SearchResponseArtistRelation),
	"album": AlbumRelation
});

export type SearchResponseVideoQualityType = ("MP4_1080P" | string);

export const SearchResponseVideoQualityType = autoguard.Union.of(
	autoguard.StringLiteral.of("MP4_1080P"),
	autoguard.String
);

export type SearchResponseVideo = {
	"id": number,
	"title": string,
	"volumeNumber": number,
	"trackNumber": number,
	"releaseDate": string,
	"imagePath": (null | any),
	"imageId": string,
	"duration": number,
	"quality": SearchResponseVideoQualityType,
	"streamReady": boolean,
	"streamStartDate": string,
	"allowStreaming": boolean,
	"explicit": boolean,
	"popularity": number,
	"type": string,
	"adsUrl": (null | any),
	"adsPrePaywallOnly": boolean,
	"artists": SearchResponseArtistRelation[],
	"album": (null | any)
};

export const SearchResponseVideo = autoguard.Object.of({
	"id": autoguard.Number,
	"title": autoguard.String,
	"volumeNumber": autoguard.Number,
	"trackNumber": autoguard.Number,
	"releaseDate": autoguard.String,
	"imagePath": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	),
	"imageId": autoguard.String,
	"duration": autoguard.Number,
	"quality": SearchResponseVideoQualityType,
	"streamReady": autoguard.Boolean,
	"streamStartDate": autoguard.String,
	"allowStreaming": autoguard.Boolean,
	"explicit": autoguard.Boolean,
	"popularity": autoguard.Number,
	"type": autoguard.String,
	"adsUrl": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	),
	"adsPrePaywallOnly": autoguard.Boolean,
	"artists": autoguard.Array.of(SearchResponseArtistRelation),
	"album": autoguard.Union.of(
		autoguard.Null,
		autoguard.Any
	)
});

export type EntityType = ("ARTISTS" | "ALBUMS" | "PLAYLISTS" | "TRACKS" | "VIDEOS");

export const EntityType = autoguard.Union.of(
	autoguard.StringLiteral.of("ARTISTS"),
	autoguard.StringLiteral.of("ALBUMS"),
	autoguard.StringLiteral.of("PLAYLISTS"),
	autoguard.StringLiteral.of("TRACKS"),
	autoguard.StringLiteral.of("VIDEOS")
);

export type SearchResponseTopHitArtist = {
	"value": SearchResponseArtist,
	"type": "ARTISTS"
};

export const SearchResponseTopHitArtist = autoguard.Object.of({
	"value": SearchResponseArtist,
	"type": autoguard.StringLiteral.of("ARTISTS")
});

export type SearchResponseTopHitAlbum = {
	"value": SearchResponseAlbum,
	"type": "ALBUMS"
};

export const SearchResponseTopHitAlbum = autoguard.Object.of({
	"value": SearchResponseAlbum,
	"type": autoguard.StringLiteral.of("ALBUMS")
});

export type SearchResponseTopHitPlaylist = {
	"value": SearchResponsePlaylist,
	"type": "PLAYLISTS"
};

export const SearchResponseTopHitPlaylist = autoguard.Object.of({
	"value": SearchResponsePlaylist,
	"type": autoguard.StringLiteral.of("PLAYLISTS")
});

export type SearchResponseTopHitTrack = {
	"value": SearchResponseTrack,
	"type": "TRACKS"
};

export const SearchResponseTopHitTrack = autoguard.Object.of({
	"value": SearchResponseTrack,
	"type": autoguard.StringLiteral.of("TRACKS")
});

export type SearchResponseTopHitVideo = {
	"value": SearchResponseVideo,
	"type": "VIDEOS"
};

export const SearchResponseTopHitVideo = autoguard.Object.of({
	"value": SearchResponseVideo,
	"type": autoguard.StringLiteral.of("VIDEOS")
});

export type SearchResponse = {
	"artists": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponseArtist[]
	},
	"albums": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponseAlbum[]
	},
	"playlists": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponsePlaylist[]
	},
	"tracks": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponseTrack[]
	},
	"videos": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponseVideo[]
	},
	"topHit": (SearchResponseTopHitArtist | SearchResponseTopHitAlbum | SearchResponseTopHitPlaylist | SearchResponseTopHitTrack | SearchResponseTopHitVideo | null)
};

export const SearchResponse = autoguard.Object.of({
	"artists": autoguard.Object.of({
		"limit": autoguard.Number,
		"offset": autoguard.Number,
		"totalNumberOfItems": autoguard.Number,
		"items": autoguard.Array.of(SearchResponseArtist)
	}),
	"albums": autoguard.Object.of({
		"limit": autoguard.Number,
		"offset": autoguard.Number,
		"totalNumberOfItems": autoguard.Number,
		"items": autoguard.Array.of(SearchResponseAlbum)
	}),
	"playlists": autoguard.Object.of({
		"limit": autoguard.Number,
		"offset": autoguard.Number,
		"totalNumberOfItems": autoguard.Number,
		"items": autoguard.Array.of(SearchResponsePlaylist)
	}),
	"tracks": autoguard.Object.of({
		"limit": autoguard.Number,
		"offset": autoguard.Number,
		"totalNumberOfItems": autoguard.Number,
		"items": autoguard.Array.of(SearchResponseTrack)
	}),
	"videos": autoguard.Object.of({
		"limit": autoguard.Number,
		"offset": autoguard.Number,
		"totalNumberOfItems": autoguard.Number,
		"items": autoguard.Array.of(SearchResponseVideo)
	}),
	"topHit": autoguard.Union.of(
		SearchResponseTopHitArtist,
		SearchResponseTopHitAlbum,
		SearchResponseTopHitPlaylist,
		SearchResponseTopHitTrack,
		SearchResponseTopHitVideo,
		autoguard.Null
	)
});

export type Autoguard = {
	"ArtistType": ArtistType,
	"SearchResponseArtist": SearchResponseArtist,
	"AlbumType": AlbumType,
	"AudioQualityType": AudioQualityType,
	"AudioModeType": AudioModeType,
	"ArtistRelationType": ArtistRelationType,
	"SearchResponseArtistRelation": SearchResponseArtistRelation,
	"AlbumRelation": AlbumRelation,
	"SearchResponseAlbum": SearchResponseAlbum,
	"PlaylistType": PlaylistType,
	"PlaylistCreator": PlaylistCreator,
	"SearchResponsePlaylist": SearchResponsePlaylist,
	"SearchResponseTrack": SearchResponseTrack,
	"SearchResponseVideoQualityType": SearchResponseVideoQualityType,
	"SearchResponseVideo": SearchResponseVideo,
	"EntityType": EntityType,
	"SearchResponseTopHitArtist": SearchResponseTopHitArtist,
	"SearchResponseTopHitAlbum": SearchResponseTopHitAlbum,
	"SearchResponseTopHitPlaylist": SearchResponseTopHitPlaylist,
	"SearchResponseTopHitTrack": SearchResponseTopHitTrack,
	"SearchResponseTopHitVideo": SearchResponseTopHitVideo,
	"SearchResponse": SearchResponse
};

export const Autoguard = {
	"ArtistType": ArtistType,
	"SearchResponseArtist": SearchResponseArtist,
	"AlbumType": AlbumType,
	"AudioQualityType": AudioQualityType,
	"AudioModeType": AudioModeType,
	"ArtistRelationType": ArtistRelationType,
	"SearchResponseArtistRelation": SearchResponseArtistRelation,
	"AlbumRelation": AlbumRelation,
	"SearchResponseAlbum": SearchResponseAlbum,
	"PlaylistType": PlaylistType,
	"PlaylistCreator": PlaylistCreator,
	"SearchResponsePlaylist": SearchResponsePlaylist,
	"SearchResponseTrack": SearchResponseTrack,
	"SearchResponseVideoQualityType": SearchResponseVideoQualityType,
	"SearchResponseVideo": SearchResponseVideo,
	"EntityType": EntityType,
	"SearchResponseTopHitArtist": SearchResponseTopHitArtist,
	"SearchResponseTopHitAlbum": SearchResponseTopHitAlbum,
	"SearchResponseTopHitPlaylist": SearchResponseTopHitPlaylist,
	"SearchResponseTopHitTrack": SearchResponseTopHitTrack,
	"SearchResponseTopHitVideo": SearchResponseTopHitVideo,
	"SearchResponse": SearchResponse
};
