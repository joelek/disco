// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type ArtistType = ("ARTIST" | "CONTRIBUTOR" | string);

export const ArtistType = {
	as(subject: any, path: string = ""): ArtistType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "ARTIST") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "CONTRIBUTOR") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return (autoguard.guards.String.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is ArtistType {
		try {
			ArtistType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseArtist = {
	"id": number,
	"name": string,
	"artistTypes": ArtistType[],
	"url": string,
	"picture": string,
	"popularity": number
};

export const SearchResponseArtist = {
	as(subject: any, path: string = ""): SearchResponseArtist {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["name"], path + "[\"name\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(ArtistType.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["artistTypes"], path + "[\"artistTypes\"]");
				(autoguard.guards.String.as)(subject["url"], path + "[\"url\"]");
				(autoguard.guards.String.as)(subject["picture"], path + "[\"picture\"]");
				(autoguard.guards.Number.as)(subject["popularity"], path + "[\"popularity\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseArtist {
		try {
			SearchResponseArtist.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AlbumType = ("ALBUM" | string);

export const AlbumType = {
	as(subject: any, path: string = ""): AlbumType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "ALBUM") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return (autoguard.guards.String.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is AlbumType {
		try {
			AlbumType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AudioQualityType = ("LOSSLESS" | "HI_RES" | string);

export const AudioQualityType = {
	as(subject: any, path: string = ""): AudioQualityType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "LOSSLESS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "HI_RES") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return (autoguard.guards.String.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is AudioQualityType {
		try {
			AudioQualityType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AudioModeType = ("STEREO" | string);

export const AudioModeType = {
	as(subject: any, path: string = ""): AudioModeType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "STEREO") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return (autoguard.guards.String.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is AudioModeType {
		try {
			AudioModeType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ArtistRelationType = ("MAIN" | "FEATURED" | string);

export const ArtistRelationType = {
	as(subject: any, path: string = ""): ArtistRelationType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "MAIN") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "FEATURED") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return (autoguard.guards.String.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is ArtistRelationType {
		try {
			ArtistRelationType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseArtistRelation = {
	"id": number,
	"name": string,
	"type": ArtistRelationType
};

export const SearchResponseArtistRelation = {
	as(subject: any, path: string = ""): SearchResponseArtistRelation {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["name"], path + "[\"name\"]");
				(ArtistRelationType.as)(subject["type"], path + "[\"type\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseArtistRelation {
		try {
			SearchResponseArtistRelation.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AlbumRelation = {
	"id": number,
	"title": string,
	"cover": string,
	"videoCover": (null | any),
	"releaseDate": string
};

export const AlbumRelation = {
	as(subject: any, path: string = ""): AlbumRelation {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.String.as)(subject["cover"], path + "[\"cover\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["videoCover"], path + "[\"videoCover\"]");
				(autoguard.guards.String.as)(subject["releaseDate"], path + "[\"releaseDate\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is AlbumRelation {
		try {
			AlbumRelation.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseAlbum = {
	"id": number,
	"title": string,
	"duration": number,
	"streamReady": boolean,
	"streamStartDate": string,
	"allowStreaming": boolean,
	"premiumStreamingOnly": boolean,
	"numberOfTracks": number,
	"numberOfVideos": number,
	"numberOfVolumes": number,
	"releaseDate": string,
	"copyright": string,
	"type": AlbumType,
	"version": (any | null),
	"url": string,
	"cover": string,
	"videoCover": (any | null),
	"explicit": boolean,
	"upc": string,
	"popularity": number,
	"audioQuality": AudioQualityType,
	"audioModes": AudioModeType[],
	"artists": SearchResponseArtistRelation[]
};

export const SearchResponseAlbum = {
	as(subject: any, path: string = ""): SearchResponseAlbum {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.Number.as)(subject["duration"], path + "[\"duration\"]");
				(autoguard.guards.Boolean.as)(subject["streamReady"], path + "[\"streamReady\"]");
				(autoguard.guards.String.as)(subject["streamStartDate"], path + "[\"streamStartDate\"]");
				(autoguard.guards.Boolean.as)(subject["allowStreaming"], path + "[\"allowStreaming\"]");
				(autoguard.guards.Boolean.as)(subject["premiumStreamingOnly"], path + "[\"premiumStreamingOnly\"]");
				(autoguard.guards.Number.as)(subject["numberOfTracks"], path + "[\"numberOfTracks\"]");
				(autoguard.guards.Number.as)(subject["numberOfVideos"], path + "[\"numberOfVideos\"]");
				(autoguard.guards.Number.as)(subject["numberOfVolumes"], path + "[\"numberOfVolumes\"]");
				(autoguard.guards.String.as)(subject["releaseDate"], path + "[\"releaseDate\"]");
				(autoguard.guards.String.as)(subject["copyright"], path + "[\"copyright\"]");
				(AlbumType.as)(subject["type"], path + "[\"type\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["version"], path + "[\"version\"]");
				(autoguard.guards.String.as)(subject["url"], path + "[\"url\"]");
				(autoguard.guards.String.as)(subject["cover"], path + "[\"cover\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["videoCover"], path + "[\"videoCover\"]");
				(autoguard.guards.Boolean.as)(subject["explicit"], path + "[\"explicit\"]");
				(autoguard.guards.String.as)(subject["upc"], path + "[\"upc\"]");
				(autoguard.guards.Number.as)(subject["popularity"], path + "[\"popularity\"]");
				(AudioQualityType.as)(subject["audioQuality"], path + "[\"audioQuality\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(AudioModeType.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["audioModes"], path + "[\"audioModes\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(SearchResponseArtistRelation.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["artists"], path + "[\"artists\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseAlbum {
		try {
			SearchResponseAlbum.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type PlaylistType = ("ARTIST" | "EDITORIAL" | string);

export const PlaylistType = {
	as(subject: any, path: string = ""): PlaylistType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "ARTIST") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "EDITORIAL") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return (autoguard.guards.String.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is PlaylistType {
		try {
			PlaylistType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type PlaylistCreator = {
	"id": number,
	"name": string,
	"artistTypes": (null | any),
	"url": (null | any),
	"picture": (null | any),
	"popularity": number
};

export const PlaylistCreator = {
	as(subject: any, path: string = ""): PlaylistCreator {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["name"], path + "[\"name\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["artistTypes"], path + "[\"artistTypes\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["url"], path + "[\"url\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["picture"], path + "[\"picture\"]");
				(autoguard.guards.Number.as)(subject["popularity"], path + "[\"popularity\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is PlaylistCreator {
		try {
			PlaylistCreator.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponsePlaylist = {
	"uuid": string,
	"title": string,
	"numberOfTracks": number,
	"numberOfVideos": number,
	"creator": ({} | PlaylistCreator),
	"description": string,
	"duration": number,
	"lastUpdated": string,
	"created": string,
	"type": PlaylistType,
	"publicPlaylist": boolean,
	"url": string,
	"image": string,
	"popularity": number,
	"squareImage": string,
	"promotedArtists": SearchResponseArtistRelation[],
	"lastItemAddedAt": (null | any)
};

export const SearchResponsePlaylist = {
	as(subject: any, path: string = ""): SearchResponsePlaylist {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject["uuid"], path + "[\"uuid\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.Number.as)(subject["numberOfTracks"], path + "[\"numberOfTracks\"]");
				(autoguard.guards.Number.as)(subject["numberOfVideos"], path + "[\"numberOfVideos\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Object)) {
								return subject;
							}
							throw "Type guard \"Object\" failed at \"" + path + "\"!";
						})(subject, path);
					} catch (error) {}
					try {
						return (PlaylistCreator.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["creator"], path + "[\"creator\"]");
				(autoguard.guards.String.as)(subject["description"], path + "[\"description\"]");
				(autoguard.guards.Number.as)(subject["duration"], path + "[\"duration\"]");
				(autoguard.guards.String.as)(subject["lastUpdated"], path + "[\"lastUpdated\"]");
				(autoguard.guards.String.as)(subject["created"], path + "[\"created\"]");
				(PlaylistType.as)(subject["type"], path + "[\"type\"]");
				(autoguard.guards.Boolean.as)(subject["publicPlaylist"], path + "[\"publicPlaylist\"]");
				(autoguard.guards.String.as)(subject["url"], path + "[\"url\"]");
				(autoguard.guards.String.as)(subject["image"], path + "[\"image\"]");
				(autoguard.guards.Number.as)(subject["popularity"], path + "[\"popularity\"]");
				(autoguard.guards.String.as)(subject["squareImage"], path + "[\"squareImage\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(SearchResponseArtistRelation.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["promotedArtists"], path + "[\"promotedArtists\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["lastItemAddedAt"], path + "[\"lastItemAddedAt\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponsePlaylist {
		try {
			SearchResponsePlaylist.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseTrack = {
	"id": number,
	"title": string,
	"duration": number,
	"replayGain": number,
	"peak": number,
	"allowStreaming": boolean,
	"streamReady": boolean,
	"streamStartDate": string,
	"premiumStreamingOnly": boolean,
	"trackNumber": number,
	"volumeNumber": number,
	"version": (null | any),
	"popularity": number,
	"copyright": string,
	"url": string,
	"isrc": string,
	"editable": boolean,
	"explicit": boolean,
	"audioQuality": AudioQualityType,
	"audioModes": AudioModeType[],
	"artists": SearchResponseArtistRelation[],
	"album": AlbumRelation
};

export const SearchResponseTrack = {
	as(subject: any, path: string = ""): SearchResponseTrack {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.Number.as)(subject["duration"], path + "[\"duration\"]");
				(autoguard.guards.Number.as)(subject["replayGain"], path + "[\"replayGain\"]");
				(autoguard.guards.Number.as)(subject["peak"], path + "[\"peak\"]");
				(autoguard.guards.Boolean.as)(subject["allowStreaming"], path + "[\"allowStreaming\"]");
				(autoguard.guards.Boolean.as)(subject["streamReady"], path + "[\"streamReady\"]");
				(autoguard.guards.String.as)(subject["streamStartDate"], path + "[\"streamStartDate\"]");
				(autoguard.guards.Boolean.as)(subject["premiumStreamingOnly"], path + "[\"premiumStreamingOnly\"]");
				(autoguard.guards.Number.as)(subject["trackNumber"], path + "[\"trackNumber\"]");
				(autoguard.guards.Number.as)(subject["volumeNumber"], path + "[\"volumeNumber\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["version"], path + "[\"version\"]");
				(autoguard.guards.Number.as)(subject["popularity"], path + "[\"popularity\"]");
				(autoguard.guards.String.as)(subject["copyright"], path + "[\"copyright\"]");
				(autoguard.guards.String.as)(subject["url"], path + "[\"url\"]");
				(autoguard.guards.String.as)(subject["isrc"], path + "[\"isrc\"]");
				(autoguard.guards.Boolean.as)(subject["editable"], path + "[\"editable\"]");
				(autoguard.guards.Boolean.as)(subject["explicit"], path + "[\"explicit\"]");
				(AudioQualityType.as)(subject["audioQuality"], path + "[\"audioQuality\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(AudioModeType.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["audioModes"], path + "[\"audioModes\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(SearchResponseArtistRelation.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["artists"], path + "[\"artists\"]");
				(AlbumRelation.as)(subject["album"], path + "[\"album\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseTrack {
		try {
			SearchResponseTrack.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseVideoQualityType = ("MP4_1080P" | string);

export const SearchResponseVideoQualityType = {
	as(subject: any, path: string = ""): SearchResponseVideoQualityType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "MP4_1080P") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return (autoguard.guards.String.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseVideoQualityType {
		try {
			SearchResponseVideoQualityType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseVideo = {
	"id": number,
	"title": string,
	"volumeNumber": number,
	"trackNumber": number,
	"releaseDate": string,
	"imagePath": (null | any),
	"imageId": string,
	"duration": number,
	"quality": SearchResponseVideoQualityType,
	"streamReady": boolean,
	"streamStartDate": string,
	"allowStreaming": boolean,
	"explicit": boolean,
	"popularity": number,
	"type": string,
	"adsUrl": (null | any),
	"adsPrePaywallOnly": boolean,
	"artists": SearchResponseArtistRelation[],
	"album": (null | any)
};

export const SearchResponseVideo = {
	as(subject: any, path: string = ""): SearchResponseVideo {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.Number.as)(subject["volumeNumber"], path + "[\"volumeNumber\"]");
				(autoguard.guards.Number.as)(subject["trackNumber"], path + "[\"trackNumber\"]");
				(autoguard.guards.String.as)(subject["releaseDate"], path + "[\"releaseDate\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["imagePath"], path + "[\"imagePath\"]");
				(autoguard.guards.String.as)(subject["imageId"], path + "[\"imageId\"]");
				(autoguard.guards.Number.as)(subject["duration"], path + "[\"duration\"]");
				(SearchResponseVideoQualityType.as)(subject["quality"], path + "[\"quality\"]");
				(autoguard.guards.Boolean.as)(subject["streamReady"], path + "[\"streamReady\"]");
				(autoguard.guards.String.as)(subject["streamStartDate"], path + "[\"streamStartDate\"]");
				(autoguard.guards.Boolean.as)(subject["allowStreaming"], path + "[\"allowStreaming\"]");
				(autoguard.guards.Boolean.as)(subject["explicit"], path + "[\"explicit\"]");
				(autoguard.guards.Number.as)(subject["popularity"], path + "[\"popularity\"]");
				(autoguard.guards.String.as)(subject["type"], path + "[\"type\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["adsUrl"], path + "[\"adsUrl\"]");
				(autoguard.guards.Boolean.as)(subject["adsPrePaywallOnly"], path + "[\"adsPrePaywallOnly\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(SearchResponseArtistRelation.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["artists"], path + "[\"artists\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							return subject;
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["album"], path + "[\"album\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseVideo {
		try {
			SearchResponseVideo.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type EntityType = ("ARTISTS" | "ALBUMS" | "PLAYLISTS" | "TRACKS" | "VIDEOS");

export const EntityType = {
	as(subject: any, path: string = ""): EntityType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "ARTISTS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "ALBUMS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "PLAYLISTS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "TRACKS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "VIDEOS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is EntityType {
		try {
			EntityType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseTopHitArtist = {
	"value": SearchResponseArtist,
	"type": "ARTISTS"
};

export const SearchResponseTopHitArtist = {
	as(subject: any, path: string = ""): SearchResponseTopHitArtist {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(SearchResponseArtist.as)(subject["value"], path + "[\"value\"]");
				((subject, path) => {
					if (subject === "ARTISTS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject["type"], path + "[\"type\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseTopHitArtist {
		try {
			SearchResponseTopHitArtist.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseTopHitAlbum = {
	"value": SearchResponseAlbum,
	"type": "ALBUMS"
};

export const SearchResponseTopHitAlbum = {
	as(subject: any, path: string = ""): SearchResponseTopHitAlbum {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(SearchResponseAlbum.as)(subject["value"], path + "[\"value\"]");
				((subject, path) => {
					if (subject === "ALBUMS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject["type"], path + "[\"type\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseTopHitAlbum {
		try {
			SearchResponseTopHitAlbum.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseTopHitPlaylist = {
	"value": SearchResponsePlaylist,
	"type": "PLAYLISTS"
};

export const SearchResponseTopHitPlaylist = {
	as(subject: any, path: string = ""): SearchResponseTopHitPlaylist {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(SearchResponsePlaylist.as)(subject["value"], path + "[\"value\"]");
				((subject, path) => {
					if (subject === "PLAYLISTS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject["type"], path + "[\"type\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseTopHitPlaylist {
		try {
			SearchResponseTopHitPlaylist.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseTopHitTrack = {
	"value": SearchResponseTrack,
	"type": "TRACKS"
};

export const SearchResponseTopHitTrack = {
	as(subject: any, path: string = ""): SearchResponseTopHitTrack {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(SearchResponseTrack.as)(subject["value"], path + "[\"value\"]");
				((subject, path) => {
					if (subject === "TRACKS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject["type"], path + "[\"type\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseTopHitTrack {
		try {
			SearchResponseTopHitTrack.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponseTopHitVideo = {
	"value": SearchResponseVideo,
	"type": "VIDEOS"
};

export const SearchResponseTopHitVideo = {
	as(subject: any, path: string = ""): SearchResponseTopHitVideo {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(SearchResponseVideo.as)(subject["value"], path + "[\"value\"]");
				((subject, path) => {
					if (subject === "VIDEOS") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject["type"], path + "[\"type\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponseTopHitVideo {
		try {
			SearchResponseTopHitVideo.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SearchResponse = {
	"artists": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponseArtist[]
	},
	"albums": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponseAlbum[]
	},
	"playlists": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponsePlaylist[]
	},
	"tracks": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponseTrack[]
	},
	"videos": {
		"limit": number,
		"offset": number,
		"totalNumberOfItems": number,
		"items": SearchResponseVideo[]
	},
	"topHit": (SearchResponseTopHitArtist | SearchResponseTopHitAlbum | SearchResponseTopHitPlaylist | SearchResponseTopHitTrack | SearchResponseTopHitVideo | null)
};

export const SearchResponse = {
	as(subject: any, path: string = ""): SearchResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						(autoguard.guards.Number.as)(subject["limit"], path + "[\"limit\"]");
						(autoguard.guards.Number.as)(subject["offset"], path + "[\"offset\"]");
						(autoguard.guards.Number.as)(subject["totalNumberOfItems"], path + "[\"totalNumberOfItems\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(SearchResponseArtist.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Type guard \"Array\" failed at \"" + path + "\"!";
						})(subject["items"], path + "[\"items\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["artists"], path + "[\"artists\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						(autoguard.guards.Number.as)(subject["limit"], path + "[\"limit\"]");
						(autoguard.guards.Number.as)(subject["offset"], path + "[\"offset\"]");
						(autoguard.guards.Number.as)(subject["totalNumberOfItems"], path + "[\"totalNumberOfItems\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(SearchResponseAlbum.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Type guard \"Array\" failed at \"" + path + "\"!";
						})(subject["items"], path + "[\"items\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["albums"], path + "[\"albums\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						(autoguard.guards.Number.as)(subject["limit"], path + "[\"limit\"]");
						(autoguard.guards.Number.as)(subject["offset"], path + "[\"offset\"]");
						(autoguard.guards.Number.as)(subject["totalNumberOfItems"], path + "[\"totalNumberOfItems\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(SearchResponsePlaylist.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Type guard \"Array\" failed at \"" + path + "\"!";
						})(subject["items"], path + "[\"items\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["playlists"], path + "[\"playlists\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						(autoguard.guards.Number.as)(subject["limit"], path + "[\"limit\"]");
						(autoguard.guards.Number.as)(subject["offset"], path + "[\"offset\"]");
						(autoguard.guards.Number.as)(subject["totalNumberOfItems"], path + "[\"totalNumberOfItems\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(SearchResponseTrack.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Type guard \"Array\" failed at \"" + path + "\"!";
						})(subject["items"], path + "[\"items\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["tracks"], path + "[\"tracks\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						(autoguard.guards.Number.as)(subject["limit"], path + "[\"limit\"]");
						(autoguard.guards.Number.as)(subject["offset"], path + "[\"offset\"]");
						(autoguard.guards.Number.as)(subject["totalNumberOfItems"], path + "[\"totalNumberOfItems\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(SearchResponseVideo.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Type guard \"Array\" failed at \"" + path + "\"!";
						})(subject["items"], path + "[\"items\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["videos"], path + "[\"videos\"]");
				((subject, path) => {
					try {
						return (SearchResponseTopHitArtist.as)(subject, path);
					} catch (error) {}
					try {
						return (SearchResponseTopHitAlbum.as)(subject, path);
					} catch (error) {}
					try {
						return (SearchResponseTopHitPlaylist.as)(subject, path);
					} catch (error) {}
					try {
						return (SearchResponseTopHitTrack.as)(subject, path);
					} catch (error) {}
					try {
						return (SearchResponseTopHitVideo.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["topHit"], path + "[\"topHit\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SearchResponse {
		try {
			SearchResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"ArtistType": ArtistType,
	"SearchResponseArtist": SearchResponseArtist,
	"AlbumType": AlbumType,
	"AudioQualityType": AudioQualityType,
	"AudioModeType": AudioModeType,
	"ArtistRelationType": ArtistRelationType,
	"SearchResponseArtistRelation": SearchResponseArtistRelation,
	"AlbumRelation": AlbumRelation,
	"SearchResponseAlbum": SearchResponseAlbum,
	"PlaylistType": PlaylistType,
	"PlaylistCreator": PlaylistCreator,
	"SearchResponsePlaylist": SearchResponsePlaylist,
	"SearchResponseTrack": SearchResponseTrack,
	"SearchResponseVideoQualityType": SearchResponseVideoQualityType,
	"SearchResponseVideo": SearchResponseVideo,
	"EntityType": EntityType,
	"SearchResponseTopHitArtist": SearchResponseTopHitArtist,
	"SearchResponseTopHitAlbum": SearchResponseTopHitAlbum,
	"SearchResponseTopHitPlaylist": SearchResponseTopHitPlaylist,
	"SearchResponseTopHitTrack": SearchResponseTopHitTrack,
	"SearchResponseTopHitVideo": SearchResponseTopHitVideo,
	"SearchResponse": SearchResponse
};

export const Autoguard = {
	"ArtistType": ArtistType,
	"SearchResponseArtist": SearchResponseArtist,
	"AlbumType": AlbumType,
	"AudioQualityType": AudioQualityType,
	"AudioModeType": AudioModeType,
	"ArtistRelationType": ArtistRelationType,
	"SearchResponseArtistRelation": SearchResponseArtistRelation,
	"AlbumRelation": AlbumRelation,
	"SearchResponseAlbum": SearchResponseAlbum,
	"PlaylistType": PlaylistType,
	"PlaylistCreator": PlaylistCreator,
	"SearchResponsePlaylist": SearchResponsePlaylist,
	"SearchResponseTrack": SearchResponseTrack,
	"SearchResponseVideoQualityType": SearchResponseVideoQualityType,
	"SearchResponseVideo": SearchResponseVideo,
	"EntityType": EntityType,
	"SearchResponseTopHitArtist": SearchResponseTopHitArtist,
	"SearchResponseTopHitAlbum": SearchResponseTopHitAlbum,
	"SearchResponseTopHitPlaylist": SearchResponseTopHitPlaylist,
	"SearchResponseTopHitTrack": SearchResponseTopHitTrack,
	"SearchResponseTopHitVideo": SearchResponseTopHitVideo,
	"SearchResponse": SearchResponse
};
