// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const ArtistType: autoguard.serialization.MessageGuard<ArtistType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("ARTIST"),
	autoguard.guards.StringLiteral.of("CONTRIBUTOR"),
	autoguard.guards.String
));

export type ArtistType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"ARTIST">,
	autoguard.guards.StringLiteral<"CONTRIBUTOR">,
	autoguard.guards.String
]>>;

export const SearchResponseArtist: autoguard.serialization.MessageGuard<SearchResponseArtist> = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"name": autoguard.guards.String,
	"artistTypes": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => ArtistType)),
	"url": autoguard.guards.String,
	"picture": autoguard.guards.String,
	"popularity": autoguard.guards.Number
}, {});

export type SearchResponseArtist = autoguard.guards.Object<{
	"id": autoguard.guards.Number,
	"name": autoguard.guards.String,
	"artistTypes": autoguard.guards.Array<autoguard.guards.Reference<ArtistType>>,
	"url": autoguard.guards.String,
	"picture": autoguard.guards.String,
	"popularity": autoguard.guards.Number
}, {}>;

export const AlbumType: autoguard.serialization.MessageGuard<AlbumType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("ALBUM"),
	autoguard.guards.String
));

export type AlbumType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"ALBUM">,
	autoguard.guards.String
]>>;

export const AudioQualityType: autoguard.serialization.MessageGuard<AudioQualityType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("LOSSLESS"),
	autoguard.guards.StringLiteral.of("HI_RES"),
	autoguard.guards.String
));

export type AudioQualityType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"LOSSLESS">,
	autoguard.guards.StringLiteral<"HI_RES">,
	autoguard.guards.String
]>>;

export const AudioModeType: autoguard.serialization.MessageGuard<AudioModeType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("STEREO"),
	autoguard.guards.String
));

export type AudioModeType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"STEREO">,
	autoguard.guards.String
]>>;

export const ArtistRelationType: autoguard.serialization.MessageGuard<ArtistRelationType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("MAIN"),
	autoguard.guards.StringLiteral.of("FEATURED"),
	autoguard.guards.String
));

export type ArtistRelationType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"MAIN">,
	autoguard.guards.StringLiteral<"FEATURED">,
	autoguard.guards.String
]>>;

export const SearchResponseArtistRelation: autoguard.serialization.MessageGuard<SearchResponseArtistRelation> = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"name": autoguard.guards.String,
	"type": autoguard.guards.Reference.of(() => ArtistRelationType)
}, {});

export type SearchResponseArtistRelation = autoguard.guards.Object<{
	"id": autoguard.guards.Number,
	"name": autoguard.guards.String,
	"type": autoguard.guards.Reference<ArtistRelationType>
}, {}>;

export const AlbumRelation: autoguard.serialization.MessageGuard<AlbumRelation> = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"title": autoguard.guards.String,
	"cover": autoguard.guards.String,
	"videoCover": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	)),
	"releaseDate": autoguard.guards.String
}, {});

export type AlbumRelation = autoguard.guards.Object<{
	"id": autoguard.guards.Number,
	"title": autoguard.guards.String,
	"cover": autoguard.guards.String,
	"videoCover": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>,
	"releaseDate": autoguard.guards.String
}, {}>;

export const SearchResponseAlbum: autoguard.serialization.MessageGuard<SearchResponseAlbum> = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"title": autoguard.guards.String,
	"duration": autoguard.guards.Number,
	"streamReady": autoguard.guards.Boolean,
	"streamStartDate": autoguard.guards.String,
	"allowStreaming": autoguard.guards.Boolean,
	"premiumStreamingOnly": autoguard.guards.Boolean,
	"numberOfTracks": autoguard.guards.Number,
	"numberOfVideos": autoguard.guards.Number,
	"numberOfVolumes": autoguard.guards.Number,
	"releaseDate": autoguard.guards.String,
	"copyright": autoguard.guards.String,
	"type": autoguard.guards.Reference.of(() => AlbumType),
	"version": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Any,
		autoguard.guards.Null
	)),
	"url": autoguard.guards.String,
	"cover": autoguard.guards.String,
	"videoCover": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Any,
		autoguard.guards.Null
	)),
	"explicit": autoguard.guards.Boolean,
	"upc": autoguard.guards.String,
	"popularity": autoguard.guards.Number,
	"audioQuality": autoguard.guards.Reference.of(() => AudioQualityType),
	"audioModes": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => AudioModeType)),
	"artists": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponseArtistRelation))
}, {});

export type SearchResponseAlbum = autoguard.guards.Object<{
	"id": autoguard.guards.Number,
	"title": autoguard.guards.String,
	"duration": autoguard.guards.Number,
	"streamReady": autoguard.guards.Boolean,
	"streamStartDate": autoguard.guards.String,
	"allowStreaming": autoguard.guards.Boolean,
	"premiumStreamingOnly": autoguard.guards.Boolean,
	"numberOfTracks": autoguard.guards.Number,
	"numberOfVideos": autoguard.guards.Number,
	"numberOfVolumes": autoguard.guards.Number,
	"releaseDate": autoguard.guards.String,
	"copyright": autoguard.guards.String,
	"type": autoguard.guards.Reference<AlbumType>,
	"version": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Any,
		autoguard.guards.Null
	]>>,
	"url": autoguard.guards.String,
	"cover": autoguard.guards.String,
	"videoCover": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Any,
		autoguard.guards.Null
	]>>,
	"explicit": autoguard.guards.Boolean,
	"upc": autoguard.guards.String,
	"popularity": autoguard.guards.Number,
	"audioQuality": autoguard.guards.Reference<AudioQualityType>,
	"audioModes": autoguard.guards.Array<autoguard.guards.Reference<AudioModeType>>,
	"artists": autoguard.guards.Array<autoguard.guards.Reference<SearchResponseArtistRelation>>
}, {}>;

export const PlaylistType: autoguard.serialization.MessageGuard<PlaylistType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("ARTIST"),
	autoguard.guards.StringLiteral.of("EDITORIAL"),
	autoguard.guards.String
));

export type PlaylistType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"ARTIST">,
	autoguard.guards.StringLiteral<"EDITORIAL">,
	autoguard.guards.String
]>>;

export const PlaylistCreator: autoguard.serialization.MessageGuard<PlaylistCreator> = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"name": autoguard.guards.String,
	"artistTypes": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	)),
	"url": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	)),
	"picture": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	)),
	"popularity": autoguard.guards.Number
}, {});

export type PlaylistCreator = autoguard.guards.Object<{
	"id": autoguard.guards.Number,
	"name": autoguard.guards.String,
	"artistTypes": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>,
	"url": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>,
	"picture": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>,
	"popularity": autoguard.guards.Number
}, {}>;

export const SearchResponsePlaylist: autoguard.serialization.MessageGuard<SearchResponsePlaylist> = autoguard.guards.Object.of({
	"uuid": autoguard.guards.String,
	"title": autoguard.guards.String,
	"numberOfTracks": autoguard.guards.Number,
	"numberOfVideos": autoguard.guards.Number,
	"creator": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Object.of({}, {}),
		autoguard.guards.Reference.of(() => PlaylistCreator)
	)),
	"description": autoguard.guards.String,
	"duration": autoguard.guards.Number,
	"lastUpdated": autoguard.guards.String,
	"created": autoguard.guards.String,
	"type": autoguard.guards.Reference.of(() => PlaylistType),
	"publicPlaylist": autoguard.guards.Boolean,
	"url": autoguard.guards.String,
	"image": autoguard.guards.String,
	"popularity": autoguard.guards.Number,
	"squareImage": autoguard.guards.String,
	"promotedArtists": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponseArtistRelation)),
	"lastItemAddedAt": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	))
}, {});

export type SearchResponsePlaylist = autoguard.guards.Object<{
	"uuid": autoguard.guards.String,
	"title": autoguard.guards.String,
	"numberOfTracks": autoguard.guards.Number,
	"numberOfVideos": autoguard.guards.Number,
	"creator": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Object<{}, {}>,
		autoguard.guards.Reference<PlaylistCreator>
	]>>,
	"description": autoguard.guards.String,
	"duration": autoguard.guards.Number,
	"lastUpdated": autoguard.guards.String,
	"created": autoguard.guards.String,
	"type": autoguard.guards.Reference<PlaylistType>,
	"publicPlaylist": autoguard.guards.Boolean,
	"url": autoguard.guards.String,
	"image": autoguard.guards.String,
	"popularity": autoguard.guards.Number,
	"squareImage": autoguard.guards.String,
	"promotedArtists": autoguard.guards.Array<autoguard.guards.Reference<SearchResponseArtistRelation>>,
	"lastItemAddedAt": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>
}, {}>;

export const SearchResponseTrack: autoguard.serialization.MessageGuard<SearchResponseTrack> = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"title": autoguard.guards.String,
	"duration": autoguard.guards.Number,
	"replayGain": autoguard.guards.Number,
	"peak": autoguard.guards.Number,
	"allowStreaming": autoguard.guards.Boolean,
	"streamReady": autoguard.guards.Boolean,
	"streamStartDate": autoguard.guards.String,
	"premiumStreamingOnly": autoguard.guards.Boolean,
	"trackNumber": autoguard.guards.Number,
	"volumeNumber": autoguard.guards.Number,
	"version": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	)),
	"popularity": autoguard.guards.Number,
	"copyright": autoguard.guards.String,
	"url": autoguard.guards.String,
	"isrc": autoguard.guards.String,
	"editable": autoguard.guards.Boolean,
	"explicit": autoguard.guards.Boolean,
	"audioQuality": autoguard.guards.Reference.of(() => AudioQualityType),
	"audioModes": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => AudioModeType)),
	"artists": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponseArtistRelation)),
	"album": autoguard.guards.Reference.of(() => AlbumRelation)
}, {});

export type SearchResponseTrack = autoguard.guards.Object<{
	"id": autoguard.guards.Number,
	"title": autoguard.guards.String,
	"duration": autoguard.guards.Number,
	"replayGain": autoguard.guards.Number,
	"peak": autoguard.guards.Number,
	"allowStreaming": autoguard.guards.Boolean,
	"streamReady": autoguard.guards.Boolean,
	"streamStartDate": autoguard.guards.String,
	"premiumStreamingOnly": autoguard.guards.Boolean,
	"trackNumber": autoguard.guards.Number,
	"volumeNumber": autoguard.guards.Number,
	"version": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>,
	"popularity": autoguard.guards.Number,
	"copyright": autoguard.guards.String,
	"url": autoguard.guards.String,
	"isrc": autoguard.guards.String,
	"editable": autoguard.guards.Boolean,
	"explicit": autoguard.guards.Boolean,
	"audioQuality": autoguard.guards.Reference<AudioQualityType>,
	"audioModes": autoguard.guards.Array<autoguard.guards.Reference<AudioModeType>>,
	"artists": autoguard.guards.Array<autoguard.guards.Reference<SearchResponseArtistRelation>>,
	"album": autoguard.guards.Reference<AlbumRelation>
}, {}>;

export const SearchResponseVideoQualityType: autoguard.serialization.MessageGuard<SearchResponseVideoQualityType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("MP4_1080P"),
	autoguard.guards.String
));

export type SearchResponseVideoQualityType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"MP4_1080P">,
	autoguard.guards.String
]>>;

export const SearchResponseVideo: autoguard.serialization.MessageGuard<SearchResponseVideo> = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"title": autoguard.guards.String,
	"volumeNumber": autoguard.guards.Number,
	"trackNumber": autoguard.guards.Number,
	"releaseDate": autoguard.guards.String,
	"imagePath": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	)),
	"imageId": autoguard.guards.String,
	"duration": autoguard.guards.Number,
	"quality": autoguard.guards.Reference.of(() => SearchResponseVideoQualityType),
	"streamReady": autoguard.guards.Boolean,
	"streamStartDate": autoguard.guards.String,
	"allowStreaming": autoguard.guards.Boolean,
	"explicit": autoguard.guards.Boolean,
	"popularity": autoguard.guards.Number,
	"type": autoguard.guards.String,
	"adsUrl": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	)),
	"adsPrePaywallOnly": autoguard.guards.Boolean,
	"artists": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponseArtistRelation)),
	"album": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Null,
		autoguard.guards.Any
	))
}, {});

export type SearchResponseVideo = autoguard.guards.Object<{
	"id": autoguard.guards.Number,
	"title": autoguard.guards.String,
	"volumeNumber": autoguard.guards.Number,
	"trackNumber": autoguard.guards.Number,
	"releaseDate": autoguard.guards.String,
	"imagePath": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>,
	"imageId": autoguard.guards.String,
	"duration": autoguard.guards.Number,
	"quality": autoguard.guards.Reference<SearchResponseVideoQualityType>,
	"streamReady": autoguard.guards.Boolean,
	"streamStartDate": autoguard.guards.String,
	"allowStreaming": autoguard.guards.Boolean,
	"explicit": autoguard.guards.Boolean,
	"popularity": autoguard.guards.Number,
	"type": autoguard.guards.String,
	"adsUrl": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>,
	"adsPrePaywallOnly": autoguard.guards.Boolean,
	"artists": autoguard.guards.Array<autoguard.guards.Reference<SearchResponseArtistRelation>>,
	"album": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Null,
		autoguard.guards.Any
	]>>
}, {}>;

export const EntityType: autoguard.serialization.MessageGuard<EntityType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("ARTISTS"),
	autoguard.guards.StringLiteral.of("ALBUMS"),
	autoguard.guards.StringLiteral.of("PLAYLISTS"),
	autoguard.guards.StringLiteral.of("TRACKS"),
	autoguard.guards.StringLiteral.of("VIDEOS")
));

export type EntityType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"ARTISTS">,
	autoguard.guards.StringLiteral<"ALBUMS">,
	autoguard.guards.StringLiteral<"PLAYLISTS">,
	autoguard.guards.StringLiteral<"TRACKS">,
	autoguard.guards.StringLiteral<"VIDEOS">
]>>;

export const SearchResponseTopHitArtist: autoguard.serialization.MessageGuard<SearchResponseTopHitArtist> = autoguard.guards.Object.of({
	"value": autoguard.guards.Reference.of(() => SearchResponseArtist),
	"type": autoguard.guards.StringLiteral.of("ARTISTS")
}, {});

export type SearchResponseTopHitArtist = autoguard.guards.Object<{
	"value": autoguard.guards.Reference<SearchResponseArtist>,
	"type": autoguard.guards.StringLiteral<"ARTISTS">
}, {}>;

export const SearchResponseTopHitAlbum: autoguard.serialization.MessageGuard<SearchResponseTopHitAlbum> = autoguard.guards.Object.of({
	"value": autoguard.guards.Reference.of(() => SearchResponseAlbum),
	"type": autoguard.guards.StringLiteral.of("ALBUMS")
}, {});

export type SearchResponseTopHitAlbum = autoguard.guards.Object<{
	"value": autoguard.guards.Reference<SearchResponseAlbum>,
	"type": autoguard.guards.StringLiteral<"ALBUMS">
}, {}>;

export const SearchResponseTopHitPlaylist: autoguard.serialization.MessageGuard<SearchResponseTopHitPlaylist> = autoguard.guards.Object.of({
	"value": autoguard.guards.Reference.of(() => SearchResponsePlaylist),
	"type": autoguard.guards.StringLiteral.of("PLAYLISTS")
}, {});

export type SearchResponseTopHitPlaylist = autoguard.guards.Object<{
	"value": autoguard.guards.Reference<SearchResponsePlaylist>,
	"type": autoguard.guards.StringLiteral<"PLAYLISTS">
}, {}>;

export const SearchResponseTopHitTrack: autoguard.serialization.MessageGuard<SearchResponseTopHitTrack> = autoguard.guards.Object.of({
	"value": autoguard.guards.Reference.of(() => SearchResponseTrack),
	"type": autoguard.guards.StringLiteral.of("TRACKS")
}, {});

export type SearchResponseTopHitTrack = autoguard.guards.Object<{
	"value": autoguard.guards.Reference<SearchResponseTrack>,
	"type": autoguard.guards.StringLiteral<"TRACKS">
}, {}>;

export const SearchResponseTopHitVideo: autoguard.serialization.MessageGuard<SearchResponseTopHitVideo> = autoguard.guards.Object.of({
	"value": autoguard.guards.Reference.of(() => SearchResponseVideo),
	"type": autoguard.guards.StringLiteral.of("VIDEOS")
}, {});

export type SearchResponseTopHitVideo = autoguard.guards.Object<{
	"value": autoguard.guards.Reference<SearchResponseVideo>,
	"type": autoguard.guards.StringLiteral<"VIDEOS">
}, {}>;

export const SearchResponse: autoguard.serialization.MessageGuard<SearchResponse> = autoguard.guards.Object.of({
	"artists": autoguard.guards.Object.of({
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponseArtist))
	}, {}),
	"albums": autoguard.guards.Object.of({
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponseAlbum))
	}, {}),
	"playlists": autoguard.guards.Object.of({
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponsePlaylist))
	}, {}),
	"tracks": autoguard.guards.Object.of({
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponseTrack))
	}, {}),
	"videos": autoguard.guards.Object.of({
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => SearchResponseVideo))
	}, {}),
	"topHit": autoguard.guards.Group.of(autoguard.guards.Union.of(
		autoguard.guards.Reference.of(() => SearchResponseTopHitArtist),
		autoguard.guards.Reference.of(() => SearchResponseTopHitAlbum),
		autoguard.guards.Reference.of(() => SearchResponseTopHitPlaylist),
		autoguard.guards.Reference.of(() => SearchResponseTopHitTrack),
		autoguard.guards.Reference.of(() => SearchResponseTopHitVideo),
		autoguard.guards.Null
	))
}, {});

export type SearchResponse = autoguard.guards.Object<{
	"artists": autoguard.guards.Object<{
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array<autoguard.guards.Reference<SearchResponseArtist>>
	}, {}>,
	"albums": autoguard.guards.Object<{
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array<autoguard.guards.Reference<SearchResponseAlbum>>
	}, {}>,
	"playlists": autoguard.guards.Object<{
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array<autoguard.guards.Reference<SearchResponsePlaylist>>
	}, {}>,
	"tracks": autoguard.guards.Object<{
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array<autoguard.guards.Reference<SearchResponseTrack>>
	}, {}>,
	"videos": autoguard.guards.Object<{
		"limit": autoguard.guards.Number,
		"offset": autoguard.guards.Number,
		"totalNumberOfItems": autoguard.guards.Number,
		"items": autoguard.guards.Array<autoguard.guards.Reference<SearchResponseVideo>>
	}, {}>,
	"topHit": autoguard.guards.Group<autoguard.guards.Union<[
		autoguard.guards.Reference<SearchResponseTopHitArtist>,
		autoguard.guards.Reference<SearchResponseTopHitAlbum>,
		autoguard.guards.Reference<SearchResponseTopHitPlaylist>,
		autoguard.guards.Reference<SearchResponseTopHitTrack>,
		autoguard.guards.Reference<SearchResponseTopHitVideo>,
		autoguard.guards.Null
	]>>
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"ArtistType": autoguard.guards.Reference.of(() => ArtistType),
		"SearchResponseArtist": autoguard.guards.Reference.of(() => SearchResponseArtist),
		"AlbumType": autoguard.guards.Reference.of(() => AlbumType),
		"AudioQualityType": autoguard.guards.Reference.of(() => AudioQualityType),
		"AudioModeType": autoguard.guards.Reference.of(() => AudioModeType),
		"ArtistRelationType": autoguard.guards.Reference.of(() => ArtistRelationType),
		"SearchResponseArtistRelation": autoguard.guards.Reference.of(() => SearchResponseArtistRelation),
		"AlbumRelation": autoguard.guards.Reference.of(() => AlbumRelation),
		"SearchResponseAlbum": autoguard.guards.Reference.of(() => SearchResponseAlbum),
		"PlaylistType": autoguard.guards.Reference.of(() => PlaylistType),
		"PlaylistCreator": autoguard.guards.Reference.of(() => PlaylistCreator),
		"SearchResponsePlaylist": autoguard.guards.Reference.of(() => SearchResponsePlaylist),
		"SearchResponseTrack": autoguard.guards.Reference.of(() => SearchResponseTrack),
		"SearchResponseVideoQualityType": autoguard.guards.Reference.of(() => SearchResponseVideoQualityType),
		"SearchResponseVideo": autoguard.guards.Reference.of(() => SearchResponseVideo),
		"EntityType": autoguard.guards.Reference.of(() => EntityType),
		"SearchResponseTopHitArtist": autoguard.guards.Reference.of(() => SearchResponseTopHitArtist),
		"SearchResponseTopHitAlbum": autoguard.guards.Reference.of(() => SearchResponseTopHitAlbum),
		"SearchResponseTopHitPlaylist": autoguard.guards.Reference.of(() => SearchResponseTopHitPlaylist),
		"SearchResponseTopHitTrack": autoguard.guards.Reference.of(() => SearchResponseTopHitTrack),
		"SearchResponseTopHitVideo": autoguard.guards.Reference.of(() => SearchResponseTopHitVideo),
		"SearchResponse": autoguard.guards.Reference.of(() => SearchResponse)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
