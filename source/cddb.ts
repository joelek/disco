// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type Track = {
	artists: string[],
	title: string,
	duration_ms: number,
	number: number,
	index: number
};

export const Track = {
	as(subject: any, path: string = ""): Track {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject.artists, path + "." + "artists");
				(autoguard.guards.String.as)(subject.title, path + "." + "title");
				(autoguard.guards.Number.as)(subject.duration_ms, path + "." + "duration_ms");
				(autoguard.guards.Number.as)(subject.number, path + "." + "number");
				(autoguard.guards.Number.as)(subject.index, path + "." + "index");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Track {
		try {
			Track.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Disc = {
	id: string,
	artists: string[],
	title: string,
	year: number,
	number: number,
	tracks: Track[]
};

export const Disc = {
	as(subject: any, path: string = ""): Disc {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject.id, path + "." + "id");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject.artists, path + "." + "artists");
				(autoguard.guards.String.as)(subject.title, path + "." + "title");
				(autoguard.guards.Number.as)(subject.year, path + "." + "year");
				(autoguard.guards.Number.as)(subject.number, path + "." + "number");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Track.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject.tracks, path + "." + "tracks");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Disc {
		try {
			Disc.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Database = { [key: string]: Disc };

export const Database = {
	as(subject: any, path: string = ""): Database {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				for (let key of globalThis.Object.keys(subject)) {
					(Disc.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Type guard \"Record\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Database {
		try {
			Database.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	Track: Track,
	Disc: Disc,
	Database: Database
};

export const Autoguard = {
	Track: Track,
	Disc: Disc,
	Database: Database
};
