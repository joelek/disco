// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type Volume = {
	"replaygain_gain": number,
	"replaygain_peak": number,
	"mean_volume": number,
	"peak_volume": number
};

export const Volume = {
	as(subject: any, path: string = ""): Volume {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["replaygain_gain"], path + "[\"replaygain_gain\"]");
				(autoguard.guards.Number.as)(subject["replaygain_peak"], path + "[\"replaygain_peak\"]");
				(autoguard.guards.Number.as)(subject["mean_volume"], path + "[\"mean_volume\"]");
				(autoguard.guards.Number.as)(subject["peak_volume"], path + "[\"peak_volume\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Volume {
		try {
			Volume.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Track = {
	"number": number,
	"artists": string[],
	"title": string
};

export const Track = {
	as(subject: any, path: string = ""): Track {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["number"], path + "[\"number\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["artists"], path + "[\"artists\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Track {
		try {
			Track.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Disc = {
	"number": number,
	"artists": string[],
	"title": string,
	"year": number,
	"musicbrainz"?: string,
	"volume"?: Volume,
	"tracks": Track[]
};

export const Disc = {
	as(subject: any, path: string = ""): Disc {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject["number"], path + "[\"number\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["artists"], path + "[\"artists\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.Number.as)(subject["year"], path + "[\"year\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Undefined.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["musicbrainz"], path + "[\"musicbrainz\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Undefined.as)(subject, path);
					} catch (error) {}
					try {
						return (Volume.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["volume"], path + "[\"volume\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Track.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["tracks"], path + "[\"tracks\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Disc {
		try {
			Disc.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Database = { [key: string]: undefined | Disc };

export const Database = {
	as(subject: any, path: string = ""): Database {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				for (let key of globalThis.Object.keys(subject)) {
					(Disc.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Type guard \"Record\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Database {
		try {
			Database.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"Volume": Volume,
	"Track": Track,
	"Disc": Disc,
	"Database": Database
};

export const Autoguard = {
	"Volume": Volume,
	"Track": Track,
	"Disc": Disc,
	"Database": Database
};
