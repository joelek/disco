// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type Volume = {
	"replaygain_gain": number,
	"replaygain_peak": number,
	"mean_volume": number,
	"peak_volume": number
};

export const Volume = {
	as(subject: any, path: string = ""): Volume {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["replaygain_gain"], path + "[\"replaygain_gain\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["replaygain_peak"], path + "[\"replaygain_peak\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["mean_volume"], path + "[\"mean_volume\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["peak_volume"], path + "[\"peak_volume\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Volume {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Track = {
	"number": number,
	"artists": string[],
	"title": string
};

export const Track = {
	as(subject: any, path: string = ""): Track {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["number"], path + "[\"number\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.String)) {
									return subject as string;
								}
								throw "Expected a string at " + path + "!";
							})(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["artists"], path + "[\"artists\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Track {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Disc = {
	"number": number,
	"artists": string[],
	"title": string,
	"year": number,
	"musicbrainz"?: string,
	"volume"?: Volume,
	"cover_art_url"?: string,
	"tracks": Track[]
};

export const Disc = {
	as(subject: any, path: string = ""): Disc {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["number"], path + "[\"number\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.String)) {
									return subject as string;
								}
								throw "Expected a string at " + path + "!";
							})(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["artists"], path + "[\"artists\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["year"], path + "[\"year\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if (subject === undefined) {
								return subject;
							}
							throw "Expected undefined at " + path + "!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject, path);
					} catch (error) {}
					throw "Expected a union at " + path + "!";
				})(subject["musicbrainz"], path + "[\"musicbrainz\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if (subject === undefined) {
								return subject;
							}
							throw "Expected undefined at " + path + "!";
						})(subject, path);
					} catch (error) {}
					try {
						return (Volume.as)(subject, path);
					} catch (error) {}
					throw "Expected a union at " + path + "!";
				})(subject["volume"], path + "[\"volume\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if (subject === undefined) {
								return subject;
							}
							throw "Expected undefined at " + path + "!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject, path);
					} catch (error) {}
					throw "Expected a union at " + path + "!";
				})(subject["cover_art_url"], path + "[\"cover_art_url\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Track.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["tracks"], path + "[\"tracks\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Disc {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Database = Record<string, undefined | Disc>;

export const Database = {
	as(subject: any, path: string = ""): Database {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				for (let key of globalThis.Object.keys(subject)) {
					(Disc.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Expected a record at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Database {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"Volume": Volume,
	"Track": Track,
	"Disc": Disc,
	"Database": Database
};

export const Autoguard = {
	"Volume": Volume,
	"Track": Track,
	"Disc": Disc,
	"Database": Database
};
