// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type Movie = {
	"id": string,
	"title": string,
	"year": number,
	"summary": string,
	"poster_url": string,
	"genres": string[],
	"actors": string[]
};

export const Movie = {
	as(subject: any, path: string = ""): Movie {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.Number.as)(subject["year"], path + "[\"year\"]");
				(autoguard.guards.String.as)(subject["summary"], path + "[\"summary\"]");
				(autoguard.guards.String.as)(subject["poster_url"], path + "[\"poster_url\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["genres"], path + "[\"genres\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["actors"], path + "[\"actors\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Movie {
		try {
			Movie.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Show = {
	"id": string,
	"title": string,
	"summary": string,
	"genres": string[],
	"actors": string[]
};

export const Show = {
	as(subject: any, path: string = ""): Show {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.String.as)(subject["summary"], path + "[\"summary\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["genres"], path + "[\"genres\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["actors"], path + "[\"actors\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Show {
		try {
			Show.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Episode = {
	"id": string,
	"title": string,
	"air_date": number,
	"summary": string,
	"show_id": string,
	"season": number,
	"episode": number
};

export const Episode = {
	as(subject: any, path: string = ""): Episode {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject["id"], path + "[\"id\"]");
				(autoguard.guards.String.as)(subject["title"], path + "[\"title\"]");
				(autoguard.guards.Number.as)(subject["air_date"], path + "[\"air_date\"]");
				(autoguard.guards.String.as)(subject["summary"], path + "[\"summary\"]");
				(autoguard.guards.String.as)(subject["show_id"], path + "[\"show_id\"]");
				(autoguard.guards.Number.as)(subject["season"], path + "[\"season\"]");
				(autoguard.guards.Number.as)(subject["episode"], path + "[\"episode\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Episode {
		try {
			Episode.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Database = {
	"movies": Movie[],
	"shows": Show[],
	"episodes": Episode[]
};

export const Database = {
	as(subject: any, path: string = ""): Database {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Movie.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["movies"], path + "[\"movies\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Show.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["shows"], path + "[\"shows\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Episode.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["episodes"], path + "[\"episodes\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Database {
		try {
			Database.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"Movie": Movie,
	"Show": Show,
	"Episode": Episode,
	"Database": Database
};

export const Autoguard = {
	"Movie": Movie,
	"Show": Show,
	"Episode": Episode,
	"Database": Database
};
