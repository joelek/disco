// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type FieldOrder = ("bff" | "tff" | "progressive");

export const FieldOrder = {
	as(subject: any, path: string = ""): FieldOrder {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "bff") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "tff") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "progressive") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is FieldOrder {
		try {
			FieldOrder.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type CropSettings = {
	w: number,
	h: number,
	x: number,
	y: number
};

export const CropSettings = {
	as(subject: any, path: string = ""): CropSettings {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.Number.as)(subject.w, path + "." + "w");
				(autoguard.guards.Number.as)(subject.h, path + "." + "h");
				(autoguard.guards.Number.as)(subject.x, path + "." + "x");
				(autoguard.guards.Number.as)(subject.y, path + "." + "y");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is CropSettings {
		try {
			CropSettings.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Setting = {
	field_order: FieldOrder,
	crop: CropSettings,
	compressibility: number
};

export const Setting = {
	as(subject: any, path: string = ""): Setting {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(FieldOrder.as)(subject.field_order, path + "." + "field_order");
				(CropSettings.as)(subject.crop, path + "." + "crop");
				(autoguard.guards.Number.as)(subject.compressibility, path + "." + "compressibility");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Setting {
		try {
			Setting.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Database = { [key: string]: Setting };

export const Database = {
	as(subject: any, path: string = ""): Database {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				for (let key of globalThis.Object.keys(subject)) {
					(Setting.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Type guard \"Record\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Database {
		try {
			Database.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	FieldOrder: FieldOrder,
	CropSettings: CropSettings,
	Setting: Setting,
	Database: Database
};

export const Autoguard = {
	FieldOrder: FieldOrder,
	CropSettings: CropSettings,
	Setting: Setting,
	Database: Database
};
