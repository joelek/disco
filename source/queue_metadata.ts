// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type FieldOrder = ("bff" | "tff" | "progressive");

export const FieldOrder = {
	as(subject: any, path: string = ""): FieldOrder {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "bff") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "tff") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "progressive") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is FieldOrder {
		try {
			FieldOrder.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type PictureSettings = {
	dimx: number,
	dimy: number,
	parx: number,
	pary: number,
	darx: number,
	dary: number,
	farx: number,
	fary: number,
	fpsx: number,
	fpsy: number,
	color_range: (string | null),
	color_space: (string | null),
	color_transfer: (string | null),
	color_primaries: (string | null),
	aspect_filter: string
};

export const PictureSettings = {
	as(subject: any, path: string = ""): PictureSettings {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				(autoguard.guards.Number.as)(subject.dimx, path + "." + "dimx");
				(autoguard.guards.Number.as)(subject.dimy, path + "." + "dimy");
				(autoguard.guards.Number.as)(subject.parx, path + "." + "parx");
				(autoguard.guards.Number.as)(subject.pary, path + "." + "pary");
				(autoguard.guards.Number.as)(subject.darx, path + "." + "darx");
				(autoguard.guards.Number.as)(subject.dary, path + "." + "dary");
				(autoguard.guards.Number.as)(subject.farx, path + "." + "farx");
				(autoguard.guards.Number.as)(subject.fary, path + "." + "fary");
				(autoguard.guards.Number.as)(subject.fpsx, path + "." + "fpsx");
				(autoguard.guards.Number.as)(subject.fpsy, path + "." + "fpsy");
				((subject, path) => {
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.color_range, path + "." + "color_range");
				((subject, path) => {
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.color_space, path + "." + "color_space");
				((subject, path) => {
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.color_transfer, path + "." + "color_transfer");
				((subject, path) => {
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.color_primaries, path + "." + "color_primaries");
				(autoguard.guards.String.as)(subject.aspect_filter, path + "." + "aspect_filter");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is PictureSettings {
		try {
			PictureSettings.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type RectSettings = {
	w: number,
	h: number,
	x: number,
	y: number,
	darx: number,
	dary: number
};

export const RectSettings = {
	as(subject: any, path: string = ""): RectSettings {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				(autoguard.guards.Number.as)(subject.w, path + "." + "w");
				(autoguard.guards.Number.as)(subject.h, path + "." + "h");
				(autoguard.guards.Number.as)(subject.x, path + "." + "x");
				(autoguard.guards.Number.as)(subject.y, path + "." + "y");
				(autoguard.guards.Number.as)(subject.darx, path + "." + "darx");
				(autoguard.guards.Number.as)(subject.dary, path + "." + "dary");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is RectSettings {
		try {
			RectSettings.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Settings = {
	picture: PictureSettings,
	rect: RectSettings,
	imode: FieldOrder,
	compressibility: (number | undefined)
};

export const Settings = {
	as(subject: any, path: string = ""): Settings {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				(PictureSettings.as)(subject.picture, path + "." + "picture");
				(RectSettings.as)(subject.rect, path + "." + "rect");
				(FieldOrder.as)(subject.imode, path + "." + "imode");
				((subject, path) => {
					try {
						return (autoguard.guards.Number.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Undefined.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.compressibility, path + "." + "compressibility");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Settings {
		try {
			Settings.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SettingsDatabase = { [key: string]: Settings };

export const SettingsDatabase = {
	as(subject: any, path: string = ""): SettingsDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				for (let key of Object.keys(subject)) {
					(Settings.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Type guard \"Record\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is SettingsDatabase {
		try {
			SettingsDatabase.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	FieldOrder: FieldOrder,
	PictureSettings: PictureSettings,
	RectSettings: RectSettings,
	Settings: Settings,
	SettingsDatabase: SettingsDatabase
};

export const Autoguard = {
	FieldOrder: FieldOrder,
	PictureSettings: PictureSettings,
	RectSettings: RectSettings,
	Settings: Settings,
	SettingsDatabase: SettingsDatabase
};
