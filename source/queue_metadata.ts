// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type FieldOrder = ("bff" | "tff" | "progressive");

export const FieldOrder = {
	as(subject: any, path: string = ""): FieldOrder {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "bff") {
						return subject;
					}
					throw "Expected \"bff\" at " + path + "!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "tff") {
						return subject;
					}
					throw "Expected \"tff\" at " + path + "!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "progressive") {
						return subject;
					}
					throw "Expected \"progressive\" at " + path + "!";
				})(subject, path);
			} catch (error) {}
			throw "Expected a union at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is FieldOrder {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type CropSettings = {
	"w": number,
	"h": number,
	"x": number,
	"y": number
};

export const CropSettings = {
	as(subject: any, path: string = ""): CropSettings {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["w"], path + "[\"w\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["h"], path + "[\"h\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["x"], path + "[\"x\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["y"], path + "[\"y\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is CropSettings {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Setting = {
	"field_order": FieldOrder,
	"crop": CropSettings,
	"compressibility": number
};

export const Setting = {
	as(subject: any, path: string = ""): Setting {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(FieldOrder.as)(subject["field_order"], path + "[\"field_order\"]");
				(CropSettings.as)(subject["crop"], path + "[\"crop\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["compressibility"], path + "[\"compressibility\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Setting {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Database = Record<string, undefined | Setting>;

export const Database = {
	as(subject: any, path: string = ""): Database {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				for (let key of globalThis.Object.keys(subject)) {
					(Setting.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Expected a record at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Database {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"FieldOrder": FieldOrder,
	"CropSettings": CropSettings,
	"Setting": Setting,
	"Database": Database
};

export const Autoguard = {
	"FieldOrder": FieldOrder,
	"CropSettings": CropSettings,
	"Setting": Setting,
	"Database": Database
};
