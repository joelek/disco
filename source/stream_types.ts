// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type Stream = {
	index: number,
	codec_type: string,
	codec_name: string,
	time_base: string,
	start_pts: number,
	extradata: string,
	tags: ({ [key: string]: string } & {
		language: string
	})
};

export const Stream = {
	as(subject: any, path: string = ""): Stream {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === Number)) {
						return subject;
					}
					throw "Type guard \"Number\" failed at \"" + path + "\"!";
				})(subject.index, path + "." + "index");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === String)) {
						return subject;
					}
					throw "Type guard \"String\" failed at \"" + path + "\"!";
				})(subject.codec_type, path + "." + "codec_type");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === String)) {
						return subject;
					}
					throw "Type guard \"String\" failed at \"" + path + "\"!";
				})(subject.codec_name, path + "." + "codec_name");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === String)) {
						return subject;
					}
					throw "Type guard \"String\" failed at \"" + path + "\"!";
				})(subject.time_base, path + "." + "time_base");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === Number)) {
						return subject;
					}
					throw "Type guard \"Number\" failed at \"" + path + "\"!";
				})(subject.start_pts, path + "." + "start_pts");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === String)) {
						return subject;
					}
					throw "Type guard \"String\" failed at \"" + path + "\"!";
				})(subject.extradata, path + "." + "extradata");
				((subject, path) => {
					((subject, path) => {
						if ((subject != null) && (subject.constructor === Object)) {
							for (let key of Object.keys(subject)) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === String)) {
										return subject;
									}
									throw "Type guard \"String\" failed at \"" + path + "\"!";
								})(subject[key], path + "[\"" + key + "\"]");
							}
							return subject;
						}
						throw "Type guard \"Record\" failed at \"" + path + "\"!";
					})(subject, path);
					((subject, path) => {
						if ((subject != null) && (subject.constructor === Object)) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === String)) {
									return subject;
								}
								throw "Type guard \"String\" failed at \"" + path + "\"!";
							})(subject.language, path + "." + "language");
							return subject;
						}
						throw "Type guard \"Object\" failed at \"" + path + "\"!";
					})(subject, path);
					return subject;
				})(subject.tags, path + "." + "tags");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Stream {
		try {
			Stream.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type VideoStream = (Stream & {
	codec_type: "video",
	width: number,
	height: number,
	r_frame_rate: string,
	sample_aspect_ratio: string,
	display_aspect_ratio: string,
	color_range: (string | undefined),
	color_space: (string | undefined),
	color_transfer: (string | undefined),
	color_primaries: (string | undefined)
});

export const VideoStream = {
	as(subject: any, path: string = ""): VideoStream {
		return ((subject, path) => {
			(Stream.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === Object)) {
					((subject, path) => {
						if (subject === "video") {
							return subject;
						}
						throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
					})(subject.codec_type, path + "." + "codec_type");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === Number)) {
							return subject;
						}
						throw "Type guard \"Number\" failed at \"" + path + "\"!";
					})(subject.width, path + "." + "width");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === Number)) {
							return subject;
						}
						throw "Type guard \"Number\" failed at \"" + path + "\"!";
					})(subject.height, path + "." + "height");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === String)) {
							return subject;
						}
						throw "Type guard \"String\" failed at \"" + path + "\"!";
					})(subject.r_frame_rate, path + "." + "r_frame_rate");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === String)) {
							return subject;
						}
						throw "Type guard \"String\" failed at \"" + path + "\"!";
					})(subject.sample_aspect_ratio, path + "." + "sample_aspect_ratio");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === String)) {
							return subject;
						}
						throw "Type guard \"String\" failed at \"" + path + "\"!";
					})(subject.display_aspect_ratio, path + "." + "display_aspect_ratio");
					((subject, path) => {
						try {
							return ((subject, path) => {
								if ((subject != null) && (subject.constructor === String)) {
									return subject;
								}
								throw "Type guard \"String\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						try {
							return ((subject, path) => {
								if (subject === undefined) {
									return subject;
								}
								throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						throw "Type guard \"Union\" failed at \"" + path + "\"!";
					})(subject.color_range, path + "." + "color_range");
					((subject, path) => {
						try {
							return ((subject, path) => {
								if ((subject != null) && (subject.constructor === String)) {
									return subject;
								}
								throw "Type guard \"String\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						try {
							return ((subject, path) => {
								if (subject === undefined) {
									return subject;
								}
								throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						throw "Type guard \"Union\" failed at \"" + path + "\"!";
					})(subject.color_space, path + "." + "color_space");
					((subject, path) => {
						try {
							return ((subject, path) => {
								if ((subject != null) && (subject.constructor === String)) {
									return subject;
								}
								throw "Type guard \"String\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						try {
							return ((subject, path) => {
								if (subject === undefined) {
									return subject;
								}
								throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						throw "Type guard \"Union\" failed at \"" + path + "\"!";
					})(subject.color_transfer, path + "." + "color_transfer");
					((subject, path) => {
						try {
							return ((subject, path) => {
								if ((subject != null) && (subject.constructor === String)) {
									return subject;
								}
								throw "Type guard \"String\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						try {
							return ((subject, path) => {
								if (subject === undefined) {
									return subject;
								}
								throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						throw "Type guard \"Union\" failed at \"" + path + "\"!";
					})(subject.color_primaries, path + "." + "color_primaries");
					return subject;
				}
				throw "Type guard \"Object\" failed at \"" + path + "\"!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is VideoStream {
		try {
			VideoStream.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AudioStream = (Stream & {
	codec_type: "audio",
	sample_rate: string,
	channels: number
});

export const AudioStream = {
	as(subject: any, path: string = ""): AudioStream {
		return ((subject, path) => {
			(Stream.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === Object)) {
					((subject, path) => {
						if (subject === "audio") {
							return subject;
						}
						throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
					})(subject.codec_type, path + "." + "codec_type");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === String)) {
							return subject;
						}
						throw "Type guard \"String\" failed at \"" + path + "\"!";
					})(subject.sample_rate, path + "." + "sample_rate");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === Number)) {
							return subject;
						}
						throw "Type guard \"Number\" failed at \"" + path + "\"!";
					})(subject.channels, path + "." + "channels");
					return subject;
				}
				throw "Type guard \"Object\" failed at \"" + path + "\"!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is AudioStream {
		try {
			AudioStream.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SubtitleStream = (Stream & {
	codec_type: "subtitle"
});

export const SubtitleStream = {
	as(subject: any, path: string = ""): SubtitleStream {
		return ((subject, path) => {
			(Stream.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === Object)) {
					((subject, path) => {
						if (subject === "subtitle") {
							return subject;
						}
						throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
					})(subject.codec_type, path + "." + "codec_type");
					return subject;
				}
				throw "Type guard \"Object\" failed at \"" + path + "\"!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is SubtitleStream {
		try {
			SubtitleStream.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type StreamType = (VideoStream | AudioStream | SubtitleStream);

export const StreamType = {
	as(subject: any, path: string = ""): StreamType {
		return ((subject, path) => {
			try {
				return (VideoStream.as)(subject, path);
			} catch (error) {}
			try {
				return (AudioStream.as)(subject, path);
			} catch (error) {}
			try {
				return (SubtitleStream.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is StreamType {
		try {
			StreamType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type FFProbe = {
	streams: StreamType[]
};

export const FFProbe = {
	as(subject: any, path: string = ""): FFProbe {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === Array)) {
						for (let i = 0; i < subject.length; i++) {
							(StreamType.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject.streams, path + "." + "streams");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is FFProbe {
		try {
			FFProbe.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	Stream: Stream,
	VideoStream: VideoStream,
	AudioStream: AudioStream,
	SubtitleStream: SubtitleStream,
	StreamType: StreamType,
	FFProbe: FFProbe
};

export const Autoguard = {
	Stream: Stream,
	VideoStream: VideoStream,
	AudioStream: AudioStream,
	SubtitleStream: SubtitleStream,
	StreamType: StreamType,
	FFProbe: FFProbe
};
