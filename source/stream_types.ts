// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type Stream = {
	"index": number,
	"codec_type": string,
	"codec_name": string,
	"time_base": string,
	"start_pts": number,
	"start_time": string,
	"extradata": string,
	"tags": (Record<string, undefined | string> & {
		"language": string
	})
};

export const Stream = autoguard.Object.of({
	"index": autoguard.Number,
	"codec_type": autoguard.String,
	"codec_name": autoguard.String,
	"time_base": autoguard.String,
	"start_pts": autoguard.Number,
	"start_time": autoguard.String,
	"extradata": autoguard.String,
	"tags": autoguard.Intersection.of(
		autoguard.Record.of(autoguard.String),
		autoguard.Object.of({
			"language": autoguard.String
		})
	)
});

export type VideoStream = (Stream & {
	"codec_type": "video",
	"width": number,
	"height": number,
	"r_frame_rate": string,
	"sample_aspect_ratio": string,
	"display_aspect_ratio": string,
	"color_range"?: string,
	"color_space"?: string,
	"color_transfer"?: string,
	"color_primaries"?: string
});

export const VideoStream = autoguard.Intersection.of(
	Stream,
	autoguard.Object.of({
		"codec_type": autoguard.StringLiteral.of("video"),
		"width": autoguard.Number,
		"height": autoguard.Number,
		"r_frame_rate": autoguard.String,
		"sample_aspect_ratio": autoguard.String,
		"display_aspect_ratio": autoguard.String,
		"color_range": autoguard.Union.of(
			autoguard.Undefined,
			autoguard.String
		),
		"color_space": autoguard.Union.of(
			autoguard.Undefined,
			autoguard.String
		),
		"color_transfer": autoguard.Union.of(
			autoguard.Undefined,
			autoguard.String
		),
		"color_primaries": autoguard.Union.of(
			autoguard.Undefined,
			autoguard.String
		)
	})
);

export type AudioStream = (Stream & {
	"codec_type": "audio",
	"sample_rate": string,
	"channels": number
});

export const AudioStream = autoguard.Intersection.of(
	Stream,
	autoguard.Object.of({
		"codec_type": autoguard.StringLiteral.of("audio"),
		"sample_rate": autoguard.String,
		"channels": autoguard.Number
	})
);

export type SubtitleStream = (Stream & {
	"codec_type": "subtitle"
});

export const SubtitleStream = autoguard.Intersection.of(
	Stream,
	autoguard.Object.of({
		"codec_type": autoguard.StringLiteral.of("subtitle")
	})
);

export type StreamType = (VideoStream | AudioStream | SubtitleStream);

export const StreamType = autoguard.Union.of(
	VideoStream,
	AudioStream,
	SubtitleStream
);

export type FFProbe = {
	"streams": StreamType[]
};

export const FFProbe = autoguard.Object.of({
	"streams": autoguard.Array.of(StreamType)
});

export type Autoguard = {
	"Stream": Stream,
	"VideoStream": VideoStream,
	"AudioStream": AudioStream,
	"SubtitleStream": SubtitleStream,
	"StreamType": StreamType,
	"FFProbe": FFProbe
};

export const Autoguard = {
	"Stream": Stream,
	"VideoStream": VideoStream,
	"AudioStream": AudioStream,
	"SubtitleStream": SubtitleStream,
	"StreamType": StreamType,
	"FFProbe": FFProbe
};
