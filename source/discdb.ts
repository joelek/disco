// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type MediaContentType = ("episode" | "movie" | "neither");

export const MediaContentType = {
	as(subject: any, path: string = ""): MediaContentType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "episode") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "movie") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "neither") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MediaContentType {
		try {
			MediaContentType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MediaContent = {
	type: MediaContentType,
	selector: string,
	title: (string | null),
	year: (number | null),
	show: (string | null),
	season: (number | null),
	episode: (number | null),
	imdb: (string | undefined),
	imdb_show: (string | undefined)
};

export const MediaContent = {
	as(subject: any, path: string = ""): MediaContent {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				(MediaContentType.as)(subject.type, path + "." + "type");
				(autoguard.guards.String.as)(subject.selector, path + "." + "selector");
				((subject, path) => {
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.title, path + "." + "title");
				((subject, path) => {
					try {
						return (autoguard.guards.Number.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.year, path + "." + "year");
				((subject, path) => {
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.show, path + "." + "show");
				((subject, path) => {
					try {
						return (autoguard.guards.Number.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.season, path + "." + "season");
				((subject, path) => {
					try {
						return (autoguard.guards.Number.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Null.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.episode, path + "." + "episode");
				((subject, path) => {
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Undefined.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.imdb, path + "." + "imdb");
				((subject, path) => {
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.Undefined.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject.imdb_show, path + "." + "imdb_show");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MediaContent {
		try {
			MediaContent.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MediaType = ("dvd" | "bluray" | "neither");

export const MediaType = {
	as(subject: any, path: string = ""): MediaType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "dvd") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "bluray") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "neither") {
						return subject;
					}
					throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
				})(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MediaType {
		try {
			MediaType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Media = {
	type: MediaType,
	content: MediaContent[]
};

export const Media = {
	as(subject: any, path: string = ""): Media {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				(MediaType.as)(subject.type, path + "." + "type");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === Array)) {
						for (let i = 0; i < subject.length; i++) {
							(MediaContent.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject.content, path + "." + "content");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Media {
		try {
			Media.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MediaDatabase = { [key: string]: Media };

export const MediaDatabase = {
	as(subject: any, path: string = ""): MediaDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === Object)) {
				for (let key of Object.keys(subject)) {
					(Media.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Type guard \"Record\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MediaDatabase {
		try {
			MediaDatabase.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	MediaContentType: MediaContentType,
	MediaContent: MediaContent,
	MediaType: MediaType,
	Media: Media,
	MediaDatabase: MediaDatabase
};

export const Autoguard = {
	MediaContentType: MediaContentType,
	MediaContent: MediaContent,
	MediaType: MediaType,
	Media: Media,
	MediaDatabase: MediaDatabase
};
