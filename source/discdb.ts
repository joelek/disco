// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type Content = {
	"type": string,
	"selector": string
};

export const Content = {
	as(subject: any, path: string = ""): Content {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["type"], path + "[\"type\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["selector"], path + "[\"selector\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Content {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MovieContent = (Content & {
	"type": "movie",
	"title": string,
	"year": number,
	"part": number,
	"imdb": string,
	"poster_url": string,
	"summary": string,
	"genres": string[],
	"actors": string[]
});

export const MovieContent = {
	as(subject: any, path: string = ""): MovieContent {
		return ((subject, path) => {
			(Content.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === globalThis.Object)) {
					((subject, path) => {
						if (subject === "movie") {
							return subject;
						}
						throw "Expected \"movie\" at " + path + "!";
					})(subject["type"], path + "[\"type\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["title"], path + "[\"title\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Number)) {
							return subject as number;
						}
						throw "Expected a number at " + path + "!";
					})(subject["year"], path + "[\"year\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Number)) {
							return subject as number;
						}
						throw "Expected a number at " + path + "!";
					})(subject["part"], path + "[\"part\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["imdb"], path + "[\"imdb\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["poster_url"], path + "[\"poster_url\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["summary"], path + "[\"summary\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Array)) {
							for (let i = 0; i < subject.length; i++) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject as string;
									}
									throw "Expected a string at " + path + "!";
								})(subject[i], path + "[" + i + "]");
							}
							return subject;
						}
						throw "Expected an array at " + path + "!";
					})(subject["genres"], path + "[\"genres\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Array)) {
							for (let i = 0; i < subject.length; i++) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject as string;
									}
									throw "Expected a string at " + path + "!";
								})(subject[i], path + "[" + i + "]");
							}
							return subject;
						}
						throw "Expected an array at " + path + "!";
					})(subject["actors"], path + "[\"actors\"]");
					return subject;
				}
				throw "Expected an object at " + path + "!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is MovieContent {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type EpisodeContent = (Content & {
	"type": "episode",
	"title": string,
	"show": string,
	"season": number,
	"episode": number,
	"imdb": string,
	"imdb_show": string,
	"year": number,
	"poster_url_show"?: string,
	"summary_show": string,
	"summary": string,
	"genres_show": string[],
	"actors_show": string[]
});

export const EpisodeContent = {
	as(subject: any, path: string = ""): EpisodeContent {
		return ((subject, path) => {
			(Content.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === globalThis.Object)) {
					((subject, path) => {
						if (subject === "episode") {
							return subject;
						}
						throw "Expected \"episode\" at " + path + "!";
					})(subject["type"], path + "[\"type\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["title"], path + "[\"title\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["show"], path + "[\"show\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Number)) {
							return subject as number;
						}
						throw "Expected a number at " + path + "!";
					})(subject["season"], path + "[\"season\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Number)) {
							return subject as number;
						}
						throw "Expected a number at " + path + "!";
					})(subject["episode"], path + "[\"episode\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["imdb"], path + "[\"imdb\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["imdb_show"], path + "[\"imdb_show\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Number)) {
							return subject as number;
						}
						throw "Expected a number at " + path + "!";
					})(subject["year"], path + "[\"year\"]");
					((subject, path) => {
						try {
							return ((subject, path) => {
								if (subject === undefined) {
									return subject;
								}
								throw "Expected undefined at " + path + "!";
							})(subject, path);
						} catch (error) {}
						try {
							return ((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.String)) {
									return subject as string;
								}
								throw "Expected a string at " + path + "!";
							})(subject, path);
						} catch (error) {}
						throw "Expected a union at " + path + "!";
					})(subject["poster_url_show"], path + "[\"poster_url_show\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["summary_show"], path + "[\"summary_show\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject as string;
						}
						throw "Expected a string at " + path + "!";
					})(subject["summary"], path + "[\"summary\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Array)) {
							for (let i = 0; i < subject.length; i++) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject as string;
									}
									throw "Expected a string at " + path + "!";
								})(subject[i], path + "[" + i + "]");
							}
							return subject;
						}
						throw "Expected an array at " + path + "!";
					})(subject["genres_show"], path + "[\"genres_show\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Array)) {
							for (let i = 0; i < subject.length; i++) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject as string;
									}
									throw "Expected a string at " + path + "!";
								})(subject[i], path + "[" + i + "]");
							}
							return subject;
						}
						throw "Expected an array at " + path + "!";
					})(subject["actors_show"], path + "[\"actors_show\"]");
					return subject;
				}
				throw "Expected an object at " + path + "!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is EpisodeContent {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type UnknownContent = (Content & {
	"type": "unknown"
});

export const UnknownContent = {
	as(subject: any, path: string = ""): UnknownContent {
		return ((subject, path) => {
			(Content.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === globalThis.Object)) {
					((subject, path) => {
						if (subject === "unknown") {
							return subject;
						}
						throw "Expected \"unknown\" at " + path + "!";
					})(subject["type"], path + "[\"type\"]");
					return subject;
				}
				throw "Expected an object at " + path + "!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is UnknownContent {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MediaContent = (UnknownContent | MovieContent | EpisodeContent);

export const MediaContent = {
	as(subject: any, path: string = ""): MediaContent {
		return ((subject, path) => {
			try {
				return (UnknownContent.as)(subject, path);
			} catch (error) {}
			try {
				return (MovieContent.as)(subject, path);
			} catch (error) {}
			try {
				return (EpisodeContent.as)(subject, path);
			} catch (error) {}
			throw "Expected a union at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is MediaContent {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MediaType = ("paldvd" | "ntscdvd" | "bluray");

export const MediaType = {
	as(subject: any, path: string = ""): MediaType {
		return ((subject, path) => {
			try {
				return ((subject, path) => {
					if (subject === "paldvd") {
						return subject;
					}
					throw "Expected \"paldvd\" at " + path + "!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "ntscdvd") {
						return subject;
					}
					throw "Expected \"ntscdvd\" at " + path + "!";
				})(subject, path);
			} catch (error) {}
			try {
				return ((subject, path) => {
					if (subject === "bluray") {
						return subject;
					}
					throw "Expected \"bluray\" at " + path + "!";
				})(subject, path);
			} catch (error) {}
			throw "Expected a union at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is MediaType {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Media = {
	"type": MediaType,
	"content": MediaContent[]
};

export const Media = {
	as(subject: any, path: string = ""): Media {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(MediaType.as)(subject["type"], path + "[\"type\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(MediaContent.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["content"], path + "[\"content\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Media {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MediaDatabase = Record<string, undefined | Media>;

export const MediaDatabase = {
	as(subject: any, path: string = ""): MediaDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				for (let key of globalThis.Object.keys(subject)) {
					(Media.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Expected a record at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is MediaDatabase {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"Content": Content,
	"MovieContent": MovieContent,
	"EpisodeContent": EpisodeContent,
	"UnknownContent": UnknownContent,
	"MediaContent": MediaContent,
	"MediaType": MediaType,
	"Media": Media,
	"MediaDatabase": MediaDatabase
};

export const Autoguard = {
	"Content": Content,
	"MovieContent": MovieContent,
	"EpisodeContent": EpisodeContent,
	"UnknownContent": UnknownContent,
	"MediaContent": MediaContent,
	"MediaType": MediaType,
	"Media": Media,
	"MediaDatabase": MediaDatabase
};
