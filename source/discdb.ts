// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type Content = {
	"type": string,
	"selector": string
};

export const Content = autoguard.Object.of({
	"type": autoguard.String,
	"selector": autoguard.String
}, {});

export type MovieContent = (Content & {
	"type": "movie",
	"title": string,
	"year": number,
	"part": number,
	"imdb": string,
	"poster_url": string,
	"summary": string,
	"genres": string[],
	"actors": string[]
});

export const MovieContent = autoguard.Intersection.of(
	Content,
	autoguard.Object.of({
		"type": autoguard.StringLiteral.of("movie"),
		"title": autoguard.String,
		"year": autoguard.Number,
		"part": autoguard.Number,
		"imdb": autoguard.String,
		"poster_url": autoguard.String,
		"summary": autoguard.String,
		"genres": autoguard.Array.of(autoguard.String),
		"actors": autoguard.Array.of(autoguard.String)
	}, {})
);

export type EpisodeContent = (Content & {
	"type": "episode",
	"title": string,
	"show": string,
	"season": number,
	"episode": number,
	"imdb": string,
	"imdb_show": string,
	"year": number,
	"summary": string,
	"genres_show": string[],
	"actors_show": string[]
});

export const EpisodeContent = autoguard.Intersection.of(
	Content,
	autoguard.Object.of({
		"type": autoguard.StringLiteral.of("episode"),
		"title": autoguard.String,
		"show": autoguard.String,
		"season": autoguard.Number,
		"episode": autoguard.Number,
		"imdb": autoguard.String,
		"imdb_show": autoguard.String,
		"year": autoguard.Number,
		"summary": autoguard.String,
		"genres_show": autoguard.Array.of(autoguard.String),
		"actors_show": autoguard.Array.of(autoguard.String)
	}, {})
);

export type UnknownContent = (Content & {
	"type": "unknown"
});

export const UnknownContent = autoguard.Intersection.of(
	Content,
	autoguard.Object.of({
		"type": autoguard.StringLiteral.of("unknown")
	}, {})
);

export type MediaContent = (UnknownContent | MovieContent | EpisodeContent);

export const MediaContent = autoguard.Union.of(
	UnknownContent,
	MovieContent,
	EpisodeContent
);

export type MediaType = ("paldvd" | "ntscdvd" | "bluray");

export const MediaType = autoguard.Union.of(
	autoguard.StringLiteral.of("paldvd"),
	autoguard.StringLiteral.of("ntscdvd"),
	autoguard.StringLiteral.of("bluray")
);

export type Media = {
	"type": MediaType,
	"content": MediaContent[]
};

export const Media = autoguard.Object.of({
	"type": MediaType,
	"content": autoguard.Array.of(MediaContent)
}, {});

export type MediaDatabase = Record<string, undefined | Media>;

export const MediaDatabase = autoguard.Record.of(Media);

export type Autoguard = {
	"Content": Content,
	"MovieContent": MovieContent,
	"EpisodeContent": EpisodeContent,
	"UnknownContent": UnknownContent,
	"MediaContent": MediaContent,
	"MediaType": MediaType,
	"Media": Media,
	"MediaDatabase": MediaDatabase
};

export const Autoguard = {
	"Content": Content,
	"MovieContent": MovieContent,
	"EpisodeContent": EpisodeContent,
	"UnknownContent": UnknownContent,
	"MediaContent": MediaContent,
	"MediaType": MediaType,
	"Media": Media,
	"MediaDatabase": MediaDatabase
};
