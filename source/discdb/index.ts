// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const Content: autoguard.serialization.MessageGuard<Content> = autoguard.guards.Object.of({
	"type": autoguard.guards.String,
	"selector": autoguard.guards.String
}, {});

export type Content = autoguard.guards.Object<{
	"type": autoguard.guards.String,
	"selector": autoguard.guards.String
}, {}>;

export const MovieContent: autoguard.serialization.MessageGuard<MovieContent> = autoguard.guards.Group.of(autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => Content),
	autoguard.guards.Object.of({
		"type": autoguard.guards.StringLiteral.of("movie"),
		"title": autoguard.guards.String,
		"year": autoguard.guards.Number,
		"part": autoguard.guards.Number,
		"imdb": autoguard.guards.String,
		"poster_url": autoguard.guards.String,
		"summary": autoguard.guards.String,
		"genres": autoguard.guards.Array.of(autoguard.guards.String),
		"actors": autoguard.guards.Array.of(autoguard.guards.String)
	}, {})
));

export type MovieContent = autoguard.guards.Group<autoguard.guards.Intersection<[
	autoguard.guards.Reference<Content>,
	autoguard.guards.Object<{
		"type": autoguard.guards.StringLiteral<"movie">,
		"title": autoguard.guards.String,
		"year": autoguard.guards.Number,
		"part": autoguard.guards.Number,
		"imdb": autoguard.guards.String,
		"poster_url": autoguard.guards.String,
		"summary": autoguard.guards.String,
		"genres": autoguard.guards.Array<autoguard.guards.String>,
		"actors": autoguard.guards.Array<autoguard.guards.String>
	}, {}>
]>>;

export const EpisodeContent: autoguard.serialization.MessageGuard<EpisodeContent> = autoguard.guards.Group.of(autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => Content),
	autoguard.guards.Object.of({
		"type": autoguard.guards.StringLiteral.of("episode"),
		"title": autoguard.guards.String,
		"show": autoguard.guards.String,
		"season": autoguard.guards.Number,
		"episode": autoguard.guards.Number,
		"imdb": autoguard.guards.String,
		"imdb_show": autoguard.guards.String,
		"year": autoguard.guards.Number,
		"summary_show": autoguard.guards.String,
		"summary": autoguard.guards.String,
		"genres_show": autoguard.guards.Array.of(autoguard.guards.String),
		"actors_show": autoguard.guards.Array.of(autoguard.guards.String)
	}, {
		"part": autoguard.guards.Number,
		"poster_url_show": autoguard.guards.String
	})
));

export type EpisodeContent = autoguard.guards.Group<autoguard.guards.Intersection<[
	autoguard.guards.Reference<Content>,
	autoguard.guards.Object<{
		"type": autoguard.guards.StringLiteral<"episode">,
		"title": autoguard.guards.String,
		"show": autoguard.guards.String,
		"season": autoguard.guards.Number,
		"episode": autoguard.guards.Number,
		"imdb": autoguard.guards.String,
		"imdb_show": autoguard.guards.String,
		"year": autoguard.guards.Number,
		"summary_show": autoguard.guards.String,
		"summary": autoguard.guards.String,
		"genres_show": autoguard.guards.Array<autoguard.guards.String>,
		"actors_show": autoguard.guards.Array<autoguard.guards.String>
	}, {
		"part": autoguard.guards.Number,
		"poster_url_show": autoguard.guards.String
	}>
]>>;

export const UnknownContent: autoguard.serialization.MessageGuard<UnknownContent> = autoguard.guards.Group.of(autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => Content),
	autoguard.guards.Object.of({
		"type": autoguard.guards.StringLiteral.of("unknown")
	}, {})
));

export type UnknownContent = autoguard.guards.Group<autoguard.guards.Intersection<[
	autoguard.guards.Reference<Content>,
	autoguard.guards.Object<{
		"type": autoguard.guards.StringLiteral<"unknown">
	}, {}>
]>>;

export const MediaContent: autoguard.serialization.MessageGuard<MediaContent> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => UnknownContent),
	autoguard.guards.Reference.of(() => MovieContent),
	autoguard.guards.Reference.of(() => EpisodeContent)
));

export type MediaContent = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.Reference<UnknownContent>,
	autoguard.guards.Reference<MovieContent>,
	autoguard.guards.Reference<EpisodeContent>
]>>;

export const MediaType: autoguard.serialization.MessageGuard<MediaType> = autoguard.guards.Group.of(autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("paldvd"),
	autoguard.guards.StringLiteral.of("ntscdvd"),
	autoguard.guards.StringLiteral.of("bluray")
));

export type MediaType = autoguard.guards.Group<autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"paldvd">,
	autoguard.guards.StringLiteral<"ntscdvd">,
	autoguard.guards.StringLiteral<"bluray">
]>>;

export const Media: autoguard.serialization.MessageGuard<Media> = autoguard.guards.Object.of({
	"type": autoguard.guards.Reference.of(() => MediaType),
	"content": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => MediaContent))
}, {});

export type Media = autoguard.guards.Object<{
	"type": autoguard.guards.Reference<MediaType>,
	"content": autoguard.guards.Array<autoguard.guards.Reference<MediaContent>>
}, {}>;

export const MediaDatabase: autoguard.serialization.MessageGuard<MediaDatabase> = autoguard.guards.Record.of(autoguard.guards.Reference.of(() => Media));

export type MediaDatabase = autoguard.guards.Record<autoguard.guards.Reference<Media>>;

export namespace Autoguard {
	export const Guards = {
		"Content": autoguard.guards.Reference.of(() => Content),
		"MovieContent": autoguard.guards.Reference.of(() => MovieContent),
		"EpisodeContent": autoguard.guards.Reference.of(() => EpisodeContent),
		"UnknownContent": autoguard.guards.Reference.of(() => UnknownContent),
		"MediaContent": autoguard.guards.Reference.of(() => MediaContent),
		"MediaType": autoguard.guards.Reference.of(() => MediaType),
		"Media": autoguard.guards.Reference.of(() => Media),
		"MediaDatabase": autoguard.guards.Reference.of(() => MediaDatabase)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
