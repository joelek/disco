// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const ArtistCredit: autoguard.serialization.MessageGuard<ArtistCredit> = autoguard.guards.Object.of({
	"name": autoguard.guards.String
}, {});

export type ArtistCredit = autoguard.guards.Object<{
	"name": autoguard.guards.String
}, {}>;

export const Track: autoguard.serialization.MessageGuard<Track> = autoguard.guards.Object.of({
	"title": autoguard.guards.String,
	"artist-credit": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => ArtistCredit))
}, {});

export type Track = autoguard.guards.Object<{
	"title": autoguard.guards.String,
	"artist-credit": autoguard.guards.Array<autoguard.guards.Reference<ArtistCredit>>
}, {}>;

export const Disc: autoguard.serialization.MessageGuard<Disc> = autoguard.guards.Object.of({
	"sectors": autoguard.guards.Number,
	"offset-count": autoguard.guards.Number,
	"id": autoguard.guards.String,
	"offsets": autoguard.guards.Array.of(autoguard.guards.Number)
}, {});

export type Disc = autoguard.guards.Object<{
	"sectors": autoguard.guards.Number,
	"offset-count": autoguard.guards.Number,
	"id": autoguard.guards.String,
	"offsets": autoguard.guards.Array<autoguard.guards.Number>
}, {}>;

export const Media: autoguard.serialization.MessageGuard<Media> = autoguard.guards.Object.of({
	"position": autoguard.guards.Number,
	"discs": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Disc)),
	"tracks": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Track))
}, {});

export type Media = autoguard.guards.Object<{
	"position": autoguard.guards.Number,
	"discs": autoguard.guards.Array<autoguard.guards.Reference<Disc>>,
	"tracks": autoguard.guards.Array<autoguard.guards.Reference<Track>>
}, {}>;

export const Release: autoguard.serialization.MessageGuard<Release> = autoguard.guards.Object.of({
	"id": autoguard.guards.String,
	"title": autoguard.guards.String,
	"artist-credit": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => ArtistCredit)),
	"media": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Media))
}, {
	"date": autoguard.guards.String
});

export type Release = autoguard.guards.Object<{
	"id": autoguard.guards.String,
	"title": autoguard.guards.String,
	"artist-credit": autoguard.guards.Array<autoguard.guards.Reference<ArtistCredit>>,
	"media": autoguard.guards.Array<autoguard.guards.Reference<Media>>
}, {
	"date": autoguard.guards.String
}>;

export const DiscIdLookupResponse: autoguard.serialization.MessageGuard<DiscIdLookupResponse> = autoguard.guards.Object.of({
	"releases": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Release))
}, {});

export type DiscIdLookupResponse = autoguard.guards.Object<{
	"releases": autoguard.guards.Array<autoguard.guards.Reference<Release>>
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"ArtistCredit": autoguard.guards.Reference.of(() => ArtistCredit),
		"Track": autoguard.guards.Reference.of(() => Track),
		"Disc": autoguard.guards.Reference.of(() => Disc),
		"Media": autoguard.guards.Reference.of(() => Media),
		"Release": autoguard.guards.Reference.of(() => Release),
		"DiscIdLookupResponse": autoguard.guards.Reference.of(() => DiscIdLookupResponse)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
