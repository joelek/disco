// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const Volume: autoguard.serialization.MessageGuard<Volume> = autoguard.guards.Object.of({
	"replaygain_gain": autoguard.guards.Number,
	"replaygain_peak": autoguard.guards.Number,
	"mean_volume": autoguard.guards.Number,
	"peak_volume": autoguard.guards.Number
}, {});

export type Volume = autoguard.guards.Object<{
	"replaygain_gain": autoguard.guards.Number,
	"replaygain_peak": autoguard.guards.Number,
	"mean_volume": autoguard.guards.Number,
	"peak_volume": autoguard.guards.Number
}, {}>;

export const Track: autoguard.serialization.MessageGuard<Track> = autoguard.guards.Object.of({
	"number": autoguard.guards.Number,
	"artists": autoguard.guards.Array.of(autoguard.guards.String),
	"title": autoguard.guards.String
}, {});

export type Track = autoguard.guards.Object<{
	"number": autoguard.guards.Number,
	"artists": autoguard.guards.Array<autoguard.guards.String>,
	"title": autoguard.guards.String
}, {}>;

export const Disc: autoguard.serialization.MessageGuard<Disc> = autoguard.guards.Object.of({
	"number": autoguard.guards.Number,
	"artists": autoguard.guards.Array.of(autoguard.guards.String),
	"title": autoguard.guards.String,
	"year": autoguard.guards.Number,
	"tracks": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Track))
}, {
	"musicbrainz": autoguard.guards.String,
	"volume": autoguard.guards.Reference.of(() => Volume),
	"cover_art_url": autoguard.guards.String
});

export type Disc = autoguard.guards.Object<{
	"number": autoguard.guards.Number,
	"artists": autoguard.guards.Array<autoguard.guards.String>,
	"title": autoguard.guards.String,
	"year": autoguard.guards.Number,
	"tracks": autoguard.guards.Array<autoguard.guards.Reference<Track>>
}, {
	"musicbrainz": autoguard.guards.String,
	"volume": autoguard.guards.Reference<Volume>,
	"cover_art_url": autoguard.guards.String
}>;

export const Database: autoguard.serialization.MessageGuard<Database> = autoguard.guards.Record.of(autoguard.guards.Reference.of(() => Disc));

export type Database = autoguard.guards.Record<autoguard.guards.Reference<Disc>>;

export namespace Autoguard {
	export const Guards = {
		"Volume": autoguard.guards.Reference.of(() => Volume),
		"Track": autoguard.guards.Reference.of(() => Track),
		"Disc": autoguard.guards.Reference.of(() => Disc),
		"Database": autoguard.guards.Reference.of(() => Database)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
